{"version":3,"sources":["components/Header.jsx","components/NotFound.jsx","utils/common.js","components/EditStudentPopup.jsx","actions/studentActions.js","components/StudentChart.jsx","components/Students.jsx","components/StudentsOfClassPopUp.jsx","components/Teachers.jsx","store/reducers/StudentReducer.js","store/reducers/RelationshipsReducer.js","store/reducers/ClassesReducer.js","store/reducers/DegreesReducer.js","store/reducers/TeacherReducer.js","store/reducers/MatterReducer.js","store/reducers/index.js","store/index.js","App.js","serviceWorker.js","index.js","images/in_development.png"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","title","alt","src","Component","NotFound","Header_Header","getClassById","classes","class_id","find","_class","id","getDegreeById","degrees","degree_id","degree","getStudentById","students","student_id","student","getStudentsOfAClass","studentsOfTheSameClass","filter","degreeId","classId","students_result","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","undefined","_step6","_iterator6","Symbol","iterator","next","done","value","push","err","return","EditStudentPopUp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","studentToEdit","window","editStudentPopUp","assertThisInitialized","$","hide","relations","allClasses","allRelationsDegrees","map","allRelations","classesForThisDegree","concat","apply","el","a_class","b_class","hasOwnProperty","classPosition","common","evt","what","setState","objectSpread","name","target","parseInt","studentId","preventDefault","dispatch","type","closePopUp","_this2","updateStateFromProps","onClick","onChange","updateForm","lib","toString","disabled","key","getClassesOfADegree","class_","applyChange","connect","classesReducer","degreesReducer","relationsReducer","relationships","StudentChart","studentChart","compressed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","ret","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","isNaN","numberOfColors","colors","index","r","Math","floor","random","g","b","background","border","getRandomColors","length","labels","datasets","label","data","countStudentsInDegree","backgroundColor","borderColor","borderWidth","react_chartjs_2_es","buildDataInFormatOfChartJS","options","maintainAspectRatio","studentReducer","Students","userName","val","toLowerCase","userDegree","userClass","table_tbody","show","each","_","tr","text","includes","allDegrees","alert","onSubmit","applyFilter","placeholder","style","margin","createMoreStudents","showChart","editOneStudent","fontSize","EditStudentPopup","components_StudentChart","matters","matterReducer","StudentsOfClassPopUp","studentsOfClassPopUp","studentsToShow","console","log","width","inDevelopmentImage","overflowY","maxHeight","Teachers","userMatter","teacher_id","teachers","teacher","degrees_found","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","relation","teacherId","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","getDegreeResult","listOfClasses","degrees_relation","degree_relation","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","showStudents","components_StudentsOfClassPopUp","teacherReducer","INITIAL_STATE","StudentReducer","arguments","action","newState","JSON","parse","stringify","last_id","max","randomDegree","allDegreesWithId","randomDegreeWithId","randomClassPosition","the_class","ra","error","warn","student_index","_student_id","new_name","new_classId","new_degreeId","studentToChange","MatterReducer","rootReducer","combineReducers","store","createStore","App","rootStore","test","process","basename","es","react_router","path","exact","render","component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oNAEqBA,mLAGb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAEdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,OAAOG,MAAM,eAAcN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,cAAcC,IAAI,sEAE7ER,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACZH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,cAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIC,MAAM,QAAnB,SAEJN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYC,MAAM,IAA3B,eACJN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYC,MAAM,IAA3B,2BApBIG,aCAfC,mLAGb,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,kDAPkBO,iECF/B,SAASG,EAAaC,EAASC,GAClC,OAAOD,EAAQE,KAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOH,IAGzC,SAASI,EAAcC,EAASC,GACnC,OAAOD,EAAQJ,KAAK,SAAAM,GAAM,OAAIA,EAAOJ,KAAOG,IAOzC,SAASE,EAAeC,EAAUC,GACrC,OAAOD,EAASR,KAAK,SAAAU,GAAO,OAAIA,EAAQR,KAAOO,IA8F5C,SAASE,EAAoBH,EAAUT,EAAUM,GAEpD,IAAMO,EAAyBJ,EAASK,OAAO,SAAAH,GAAO,OAAKA,EAAQI,WAAaT,GAAaK,EAAQK,UAAYhB,IAC3GiB,EAAkB,GAHuCC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAI/D,QAAAC,EAAAC,EAAsBV,EAAtBW,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA8C,KAAnCP,EAAmCW,EAAAM,MAC1CX,EAAgBY,KAAKrB,EAAeC,EAAUE,EAAQR,MALK,MAAA2B,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAQ/D,OAAOH,MC3GLe,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,cAAeR,EAAKD,MAAMS,eAG9BC,OAAOC,iBAAPT,OAAAU,EAAA,EAAAV,CAAAD,GAPeA,4EAWfY,IAAE,gBAAgBC,KAAK,iDAGPhC,GAKhB,ODbD,SAA8BhB,EAASiD,EAAWjC,GAErD,IAAMkC,EAAalD,EAGfmD,EAFiBF,EAEkBG,IAAI,SAAAC,GAAY,OAAIA,EAAa/C,UAKpEgD,GAJJH,EAAsB,GAAGI,OAAOC,MAAM,GAAIL,IAEGpC,OAAO,SAAA0C,GAAE,OAAIA,EAAGzC,WAAaA,IAE9BoC,IAAI,SAAAK,GAAE,OAAIA,EAAGzD,UAkBzD,OAjBAsD,EAAuB,GAAGC,OAAOC,MAAM,GAAIF,GAErBJ,EAAWnC,OAAO,SAAA2C,GACpC,OAAQJ,EAAqBpD,KAAK,SAAAyD,GAQ9B,OANIA,EAAQC,eAAe,iBACvBD,EAAQvD,GAAKuD,EAAQE,cAErBF,EAAQvD,GAAKuD,EAAQ1C,QAGlB0C,EAAQvD,KAAOsD,EAAQtD,OCT3B0D,CAHYxB,KAAKJ,MAAMlC,QACTsC,KAAKJ,MAAMe,UAE4BjC,sCAGrD+C,EAAKC,GAEC,SAATA,EACA1B,KAAK2B,SAAL7B,OAAA8B,EAAA,EAAA9B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAcP,OAAA8B,EAAA,EAAA9B,CAAA,GAAME,KAAKI,MAAMC,cAAlB,CAAiCwB,KAAMJ,EAAIK,OAAOvC,WAIrD,WAATmC,EACL1B,KAAK2B,SAAL7B,OAAA8B,EAAA,EAAA9B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAcP,OAAA8B,EAAA,EAAA9B,CAAA,GAAME,KAAKI,MAAMC,cAAlB,CAAiC3B,SAAUqD,SAASN,EAAIK,OAAOvC,MAAO,QAIzE,UAATmC,GACL1B,KAAK2B,SAAL7B,OAAA8B,EAAA,EAAA9B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAcP,OAAA8B,EAAA,EAAA9B,CAAA,GAAME,KAAKI,MAAMC,cAAlB,CAAiC1B,QAASoD,SAASN,EAAIK,OAAOvC,MAAO,yDAWrFS,KAAKI,MAAMC,eACXL,KAAKI,MAAMC,eAAiBL,KAAKI,MAAMC,cAAcvC,KAAOkC,KAAKJ,MAAMS,cAAcvC,MAElFkC,KAAKI,MAALN,OAAA8B,EAAA,EAAA9B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAeL,KAAKJ,MAAMS,qDAK9BoB,GC7DT,IAAwBO,EAAWH,EAAMlD,EAAUD,ED8DlD+C,EAAIQ,iBAEJjC,KAAKJ,MAAMsC,UChEYF,EDiEnBhC,KAAKI,MAAMC,cAAcvC,GCjEK+D,EDkE9B7B,KAAKI,MAAMC,cAAcwB,KClEWlD,EDmEpCqB,KAAKI,MAAMC,cAAc1B,QCnEqBD,EDoE9CsB,KAAKI,MAAMC,cAAc3B,SClE1B,CACHyD,KAAM,mBACNH,YACAH,OACAlD,UACAD,cDgEAsB,KAAKoC,8CAKA,IAAAC,EAAArC,KACL,OAAIA,KAAKJ,MAAMS,eACXL,KAAKsC,uBAEDzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,eACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKwF,QAAS,kBAAMF,EAAKD,cAAcpF,UAAU,oBAAjD,KACAH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO5C,MAAOS,KAAKI,MAAMC,cAAcwB,KAAMW,SAAU,SAACf,GAAD,OAASY,EAAKI,WAAWhB,EAAK,WAEjG5E,EAAAC,EAAAC,cAAC2F,EAAA,OAAD,CAAQnD,MAAOS,KAAKI,MAAMC,cAAc3B,SAASiE,WAAYH,SAAU,SAACf,GAAD,OAASY,EAAKI,WAAWhB,EAAK,YACjG5E,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGqD,UAAQ,GAAzB,qBACC5C,KAAKJ,MAAM5B,QAAQ8C,IAAI,SAAA5C,GACpB,OACIrB,EAAAC,EAAAC,cAAA,UAAQwC,MAAOrB,EAAOJ,GAAI+E,IAAK3E,EAAOJ,IAAtC,IAA6CI,EAAO2D,KAApD,QAMZhF,EAAAC,EAAAC,cAAC2F,EAAA,OAAD,CAAQnD,MAAOS,KAAKI,MAAMC,cAAc1B,QAAQgE,WAAYH,SAAU,SAACf,GAAD,OAASY,EAAKI,WAAWhB,EAAK,WAChG5E,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGqD,UAAQ,GAAzB,wBACC5C,KAAK8C,oBAAoB9C,KAAKI,MAAMC,cAAc3B,UAAUoC,IAAI,SAAAiC,GAC7D,OACIlG,EAAAC,EAAAC,cAAA,UAAQwC,MAAOwD,EAAOjF,GAAI+E,IAAKE,EAAOjF,IAAtC,IAA6CiF,EAAOlB,KAApD,QAKZhF,EAAAC,EAAAC,cAAC2F,EAAA,OAAD,CAAQH,QAAS,SAACd,GAAD,OAASY,EAAKW,YAAYvB,KAA3C,gBAQb5E,EAAAC,EAAAC,cAAA,mBAtHYO,aAqIhB2F,kBARf,SAAyB7C,GACrB,MAAO,CACH1C,QAAS0C,EAAM8C,eAAexF,QAAQA,QACtCM,QAASoC,EAAM+C,eAAenF,QAC9B2C,UAAWP,EAAMgD,iBAAiBC,gBAI3BJ,CAAyBtD,WEvIlC2D,cAEF,SAAAA,EAAY1D,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,GACdzD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwD,GAAAnD,KAAAH,KAAMJ,IAENU,OAAOiD,aAAPzD,OAAAU,EAAA,EAAAV,CAAAD,GAHcA,4EAOdY,IAAE,iBAAiBC,KAAK,mDAGNtC,GAIlB,IAAIoF,EAAa,GAJWC,GAAA,EAAAC,GAAA,EAAAC,OAAA3E,EAAA,IAM5B,QAAA4E,EAAAC,EAAsBzF,EAAtBe,OAAAC,cAAAqE,GAAAG,EAAAC,EAAAxE,QAAAC,MAAAmE,GAAA,EAAgC,KAArBnF,EAAqBsF,EAAArE,MACxBiE,EAAWlC,eAAehD,EAAQI,UAClC8E,EAAWlF,EAAQI,UAAY8E,EAAWlF,EAAQI,UAAU,EAG5D8E,EAAWlF,EAAQI,UAAY,GAXX,MAAAe,GAAAiE,GAAA,EAAAC,EAAAlE,EAAA,YAAAgE,GAAA,MAAAI,EAAAnE,QAAAmE,EAAAnE,SAAA,WAAAgE,EAAA,MAAAC,GAgB5B,IAAIG,EAAM,GAhBkBC,GAAA,EAAAC,GAAA,EAAAC,OAAAjF,EAAA,IAkB5B,QAAAkF,EAAAC,EAAuBnE,KAAKJ,MAAM5B,QAAQ8C,IAAI,SAAAK,GAAE,OAAIA,EAAGrD,KAAvDqB,OAAAC,cAAA2E,GAAAG,EAAAC,EAAA9E,QAAAC,MAAAyE,GAAA,EAA4D,KAAjDrF,EAAiDwF,EAAA3E,MACxDuE,EAAItE,KAAK4E,MAAMZ,EAAW9E,IAAa,EAAI8E,EAAW9E,KAnB9B,MAAAe,GAAAuE,GAAA,EAAAC,EAAAxE,EAAA,YAAAsE,GAAA,MAAAI,EAAAzE,QAAAyE,EAAAzE,SAAA,WAAAsE,EAAA,MAAAC,GAsB5B,OAAOH,0CAKKO,GAEZ,IADA,IAAMC,EAAS,GACNC,EAAQ,EAAGA,EAAQF,EAAgBE,IAAS,CAEjD,IAAIC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgBhC,WACpCiC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgBhC,WACpCkC,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgBhC,WAGxC2B,EAAO9E,KAAK,CAACsF,WAAe,QAAQN,EAAE,KAAKI,EAAE,KAAKC,EAAE,SAAUE,OAAU,QAAQP,EAAE,KAAKI,EAAE,KAAKC,EAAE,SAGpG,OAAOP,uDAMP,IAAMA,EAAStE,KAAKgF,gBAAgBhF,KAAKJ,MAAM5B,QAAQiH,QACvD,MAAO,CACHC,OAAQlF,KAAKJ,MAAM5B,QAAQ8C,IAAI,SAAAK,GAAE,OAAIA,EAAGU,OACxCsD,SAAU,CAAC,CACPC,MAAO,wBAEPC,KAAMrF,KAAKsF,sBAAsBtF,KAAKJ,MAAMxB,UAC5CmH,gBAAiBjB,EAAOxD,IAAI,SAAAK,GAAE,OAAEA,EAAG2D,aACnCU,YAAalB,EAAOxD,IAAI,SAAAK,GAAE,OAAEA,EAAG4D,SAC/BU,YAAa,sCAMhB,IAAApD,EAAArC,KAEL,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,gBACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKwF,QAAS,kBAAMF,EAAKD,cAAcpF,UAAU,oBAAjD,KAGAH,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,CACIL,KAAMrF,KAAK2F,6BAGXC,QAAS,CAAEC,qBAAqB,eAtFjCvI,aAwGZ2F,kBAPf,SAAyB7C,GACrB,MAAO,CACHhC,SAAUgC,EAAM0F,eAAe1H,SAC/BJ,QAASoC,EAAM+C,eAAenF,UAIvBiF,CAAyBK,GCpGxChD,OAAOG,EAAIA,QAGLsF,cAEF,SAAAA,EAAYnG,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACdlG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,cAAgBR,EAAKD,MAAMxB,SAAS,IAJ1ByB,4EASLlC,GACT,OAAO6D,EAAoBxB,KAAKJ,MAAMlC,QAASC,yCAGrCe,GACV,OAAO8C,EAAqBxB,KAAKJ,MAAM5B,QAASU,uCAGxC+C,GACRA,EAAIQ,iBAEJ,IAAM+D,EAAWvF,IAAE,wBAAwB7C,KAAK,2BAA2BqI,MAAMC,cAC3EC,EAAa1F,IAAE,wBAAwB7C,KAAK,6BAA6BqI,MAAMC,cAC/EE,EAAY3F,IAAE,wBAAwB7C,KAAK,4BAA4BqI,MAAMC,cAE7EG,EAAc5F,IAAE,sBAAsB7C,KAAK,SAEjDyI,EAAYzI,KAAK,MAAM0I,OAGpBN,GACCK,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,kBAAkB8I,OAAOR,cAAcS,SAASX,GAC3DvF,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMfyF,GACCE,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,oBAAoB8I,OAAOR,cAAcS,SAASR,GAC7D1F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMf0F,GACCC,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,mBAAmB8I,OAAOR,cAAcS,SAASP,GAC5D3F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,sDF1EnB,IAA4BkG,EAAY7F,EAAcH,EEkFrDZ,KAAKJ,MAAMsC,UFlFgB0E,EEkF4B5G,KAAKJ,MAAM5B,QFlF3B+C,EEkFoCf,KAAKJ,MAAMe,UFlFjCC,EEkF4CZ,KAAKJ,MAAMlC,QFhFzG,CACHyE,KAAM,uBACNyE,aACA7F,eACAH,gBE6EAiG,MAAM,iEAGKxG,GAEXI,IAAE,gBAAgB6F,KAAK,KAEvBtG,KAAK2B,SAAS,CACVtB,sDAOJI,IAAE,iBAAiB6F,KAAK,sCAGnB,IAAAjE,EAAArC,KACC5B,EAAW4B,KAAKJ,MAAMxB,SAC5B,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkB8J,SAAU,SAACrF,GAAUY,EAAK0E,YAAYtF,KACpE5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,gBAAgBlJ,GAAG,oBAAoB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MAC1G5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,2BAAqBlJ,GAAG,sBAAsB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MACjH5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,kBAAkBlJ,GAAG,qBAAqB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,OAGjH5E,EAAAC,EAAAC,cAAA,OAAKkK,MAAO,CAACC,OAAQ,UAAWlK,UAAU,iBAEtCH,EAAAC,EAAAC,cAAC2F,EAAA,OAAD,CAAQH,QAAS,kBAAMF,EAAK8E,uBAA5B,2BACAtK,EAAAC,EAAAC,cAAC2F,EAAA,OAAD,CAAQH,QAAS,kBAAMF,EAAK+E,cAA5B,yBAGJvK,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYc,GAAG,gBAC5BjB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAIRF,EAAAC,EAAAC,cAAA,aACKqB,EAAS0C,IAAI,SAAAxC,GAAO,OACjBzB,EAAAC,EAAAC,cAAA,MAAI8F,IAAKvE,EAAQR,IACbjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAesB,EAAQuD,MACrChF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBqF,EAAKtE,cAAcO,EAAQI,UAAUmD,MACpEhF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBqF,EAAK5E,aAAaa,EAAQK,SAASkD,MACjEhF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcuF,QAAS,kBAAMF,EAAKgF,eAAe/I,KAC3DzB,EAAAC,EAAAC,cAAA,KAAGkK,MAAO,CAACK,SAAS,QAAStK,UAAU,MAAvC,iBAWxBH,EAAAC,EAAAC,cAACwK,EAAD,CAAkBlH,cAAeL,KAAKI,MAAMC,gBAE5CxD,EAAAC,EAAAC,cAACyK,EAAD,cA1IOlK,aA2JR2F,kBAXf,SAAyB7C,GACrB,MAAO,CACHhC,SAAUgC,EAAM0F,eAAe1H,SAC/BV,QAAS0C,EAAM8C,eAAexF,QAAQA,QACtCM,QAASoC,EAAM+C,eAAenF,QAC9B2C,UAAWP,EAAMgD,iBAAiBC,cAClCoE,QAASrH,EAAMsH,cAAcD,UAKtBxE,CAAyB8C,oBClKlC4B,cAEF,SAAAA,EAAY/H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2H,GACf9H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6H,GAAAxH,KAAAH,KAAMJ,IAGNU,OAAOsH,qBAAP9H,OAAAU,EAAA,EAAAV,CAAAD,GAJeA,4EAOfY,IAAE,sBAAsBC,KAAK,sCAGxB,IAAA2B,EAAArC,KACC5B,EAAW4B,KAAKJ,MAAMiI,eAE5B,OADAC,QAAQC,IAAI,WAAY3J,GAEpBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,qBACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKwF,QAAS,kBAAMF,EAAKD,cAAcpF,UAAU,oBAAjD,OAEGoB,EAAS6G,OAAO,IACfpI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BAEAF,EAAAC,EAAAC,cAAA,OAAKkK,MAAO,CAAEe,MAAO,OAAS3K,IAAK4K,IAAoB7K,IAAI,MAIjEgB,EAAS6G,OAAO,GACdpI,EAAAC,EAAAC,cAAA,OAAKkK,MAAO,CAACiB,UAAW,OAAOC,UAAW,UACtCtL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,oBAKRF,EAAAC,EAAAC,cAAA,aACKqB,EAAS0C,IAAI,SAACxC,EAASiG,GAAV,OACV1H,EAAAC,EAAAC,cAAA,MAAI8F,IAAKvE,EAAQR,IACbjB,EAAAC,EAAAC,cAAA,UAAKwH,EAAM,GACX1H,EAAAC,EAAAC,cAAA,UAAKuB,EAAQuD,sBA7C1BvE,aAkEpB2F,kBANf,SAAyB7C,GACrB,MAAO,IAKI6C,CAAyB0E,GCjElCS,cAEF,SAAAA,EAAYxI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoI,IACfvI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsI,GAAAjI,KAAAH,KAAMJ,KACDQ,MAAQ,CACTyH,eAAgB,IAHLhI,2EAQP4B,GACRA,EAAIQ,iBAEJ,IAAM+D,EAAWvF,IAAE,wBAAwB7C,KAAK,2BAA2BqI,MAAMC,cAC3EC,EAAa1F,IAAE,wBAAwB7C,KAAK,6BAA6BqI,MAAMC,cAC/EE,EAAY3F,IAAE,wBAAwB7C,KAAK,4BAA4BqI,MAAMC,cAC7EmC,EAAa5H,IAAE,wBAAwB7C,KAAK,6BAA6BqI,MAAMC,cAE/EG,EAAc5F,IAAE,sBAAsB7C,KAAK,SAEjDyI,EAAYzI,KAAK,MAAM0I,OAGnBN,GACAK,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,kBAAkB8I,OAAOR,cAAcS,SAASX,GAC3DvF,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMdyF,GACAE,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,oBAAoB8I,OAAOR,cAAcS,SAASR,GAC7D1F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMd0F,GACAC,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,mBAAmB8I,OAAOR,cAAcS,SAASP,GAC5D3F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMd2H,GACAhC,EAAYzI,KAAK,cAAc2I,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI7I,KAAK,oBAAoB8I,OAAOR,cAAcS,SAAS0B,GAC7D5H,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,8CAMT4H,EAAYrK,EAAWN,GAChCmK,QAAQC,IAAI,aAAcO,GAC1BR,QAAQC,IAAI,YAAa9J,GACzB6J,QAAQC,IAAI,WAAYpK,GAExB,IAAMS,EAAW4B,KAAKJ,MAAMxB,SAE5B4B,KAAK2B,SAAS,CACVkG,eAAgBrG,EAA2BpD,EAAUT,EAAUM,KAGnEwC,IAAE,sBAAsB6F,KAAK,sCAGxB,IAAAjE,EAAArC,KACCuI,EAAWvI,KAAKJ,MAAM2I,SACtB5H,EAAYX,KAAKJ,MAAMe,UACvB3C,EAAUgC,KAAKJ,MAAM5B,QACrBN,EAAUsC,KAAKJ,MAAMlC,QAE3B,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkB8J,SAAU,SAACrF,GAAUY,EAAK0E,YAAYtF,KACpE5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,oBAAoBlJ,GAAG,oBAAoB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MAC9G5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,qBAAkBlJ,GAAG,sBAAsB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MAC9G5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,+BAAyBlJ,GAAG,sBAAsB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MACrH5E,EAAAC,EAAAC,cAAA,SAAOoF,KAAK,OAAO6E,YAAY,sBAAsBlJ,GAAG,qBAAqB0E,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,OAGrH5E,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYc,GAAG,gBAC5BjB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBAIRF,EAAAC,EAAAC,cAAA,aACKwL,EAASzH,IAAI,SAAA0H,GAAO,ONrC1C,SAA8B7H,EAAW3C,EAASsK,GAGrD,IAAMG,EAAgB,GAH0CC,GAAA,EAAAC,GAAA,EAAAC,OAAA5J,EAAA,IAKhE,QAAA6J,EAAAC,EAAuBnI,EAAvBxB,OAAAC,cAAAsJ,GAAAG,EAAAC,EAAAzJ,QAAAC,MAAAoJ,GAAA,EAAkC,KAAvBK,EAAuBF,EAAAtJ,MAC9B,GAAIwJ,EAASC,YAAcV,EAAW,KAAAW,GAAA,EAAAC,GAAA,EAAAC,OAAAnK,EAAA,IAIlC,QAAAoK,EAAAC,EAA8BN,EAAS/K,QAAvCmB,OAAAC,cAAA6J,GAAAG,EAAAC,EAAAhK,QAAAC,MAAA2J,GAAA,EAAgD,KACtCK,EAAkBvL,EAAcC,EADMoL,EAAA7J,MACmBb,UAC5D4K,GACCb,EAAcjJ,KAAK8J,IAPO,MAAA7J,GAAAyJ,GAAA,EAAAC,EAAA1J,EAAA,YAAAwJ,GAAA,MAAAI,EAAA3J,QAAA2J,EAAA3J,SAAA,WAAAwJ,EAAA,MAAAC,MANsB,MAAA1J,GAAAkJ,GAAA,EAAAC,EAAAnJ,EAAA,YAAAiJ,GAAA,MAAAI,EAAApJ,QAAAoJ,EAAApJ,SAAA,WAAAiJ,EAAA,MAAAC,GAmBhE,OAAOH,EMmBqBjH,CAA4Bb,EAAW3C,EAASwK,EAAQ1K,IAAIgD,IAAI,SAAA5C,GAC5D,ONtE7B,SAA+BR,EAASiD,EAAWjC,EAAU4J,GAEjE,IAAIiB,EAAgB,GAChBC,EAAmB,GAHsD/F,GAAA,EAAAC,GAAA,EAAAC,OAAA3E,EAAA,IAK7E,QAAA4E,EAAAC,EAAuBlD,EAAvBxB,OAAAC,cAAAqE,GAAAG,EAAAC,EAAAxE,QAAAC,MAAAmE,GAAA,EAAkC,KAAvBsF,EAAuBnF,EAAArE,MAC7B,GAAIwJ,EAASC,YAAcV,EAAW,CAElCkB,EAAmBA,EAAiBvI,OAAO8H,EAAS/K,SAFlB,IAAA+F,GAAA,EAAAC,GAAA,EAAAC,OAAAjF,EAAA,IAIlC,QAAAkF,EAAAC,EAA8B4E,EAAS/K,QAAvCmB,OAAAC,cAAA2E,GAAAG,EAAAC,EAAA9E,QAAAC,MAAAyE,GAAA,EAAgD,KAArC0F,EAAqCvF,EAAA3E,MAC5C,GAAIkK,EAAgB/K,WAAaA,EAAS,KAAAgL,GAAA,EAAAC,GAAA,EAAAC,OAAA5K,EAAA,IACvC,QAAA6K,EAAAC,EAAqBL,EAAgB/L,QAArCyB,OAAAC,cAAAsK,GAAAG,EAAAC,EAAAzK,QAAAC,MAAAoK,GAAA,EAA8C,KAAnC3G,EAAmC8G,EAAAtK,MAGrCwD,EAAOzB,eAAe,iBACtByB,EAAOjF,GAAKiF,EAAOxB,cAEnBwB,EAAOjF,GAAKiF,EAAOpE,QAGvB4K,EAAc/J,KAAK/B,EAAaC,EAASqF,EAAOjF,MAVd,MAAA2B,GAAAkK,GAAA,EAAAC,EAAAnK,EAAA,YAAAiK,GAAA,MAAAI,EAAApK,QAAAoK,EAAApK,SAAA,WAAAiK,EAAA,MAAAC,MALZ,MAAAnK,GAAAuE,GAAA,EAAAC,EAAAxE,EAAA,YAAAsE,GAAA,MAAAI,EAAAzE,QAAAyE,EAAAzE,SAAA,WAAAsE,EAAA,MAAAC,MANkC,MAAAxE,GAAAiE,GAAA,EAAAC,EAAAlE,EAAA,YAAAgE,GAAA,MAAAI,EAAAnE,QAAAmE,EAAAnE,SAAA,WAAAgE,EAAA,MAAAC,GA4B5E,OAAO4F,EM0CgC/H,CAA4B9D,EAASiD,EAAWzC,EAAOJ,GAAI0K,EAAQ1K,IAAIgD,IAAI,SAAAiC,GAAM,OACpFlG,EAAAC,EAAAC,cAAA,MAAI8F,IAAK2F,EAAQ1K,GAAK,IAAMI,EAAOJ,GAAK,IAAMiF,EAAOjF,IACjDjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAewL,EAAQ3G,MACrChF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiB,kCAAoCwL,EAAQ1K,IAC3EjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBkB,EAAO2D,MACtChF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBuF,QAAS,kBAAMF,EAAK0H,aAAavB,EAAQ1K,GAAII,EAAOJ,GAAIiF,EAAOjF,MAAMiF,EAAOlB,gBAW5IhF,EAAAC,EAAAC,cAACiN,EAAD,CAAsBnC,eAAgB7H,KAAKI,MAAMyH,yBArI1CvK,aAsJR2F,kBAVf,SAAyB7C,GACrB,MAAO,CACHhC,SAAUgC,EAAM0F,eAAe1H,SAC/BV,QAAS0C,EAAM8C,eAAexF,QAAQA,QACtCM,QAASoC,EAAM+C,eAAenF,QAC9B2C,UAAWP,EAAMgD,iBAAiBC,cAClCkF,SAAUnI,EAAM6J,eAAe1B,WAIxBtF,CAAyBmF,WC3JlC8B,EAAgB,CAClB9L,gBAgHW+L,MAxGf,WAAuD,IAA/B/J,EAA+BgK,UAAAnF,OAAA,QAAAjG,IAAAoL,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAAnF,OAAA,EAAAmF,UAAA,QAAApL,EAEnD,IAAKqL,EAGD,OAFAvC,QAAQC,IAAI,aAEL3H,EAGX,GAAoB,yBAAhBiK,EAAOlI,KAAiC,CACxC2F,QAAQC,IAAI,wBAWZ,IATA,IAAMnB,EAAayD,EAAOzD,WACpB7F,EAAesJ,EAAOtJ,aACtBH,EAAayJ,EAAOzJ,WAGpB0J,EAAWC,KAAKC,MAAMD,KAAKE,UAAUrK,IAGrCsK,EAAUjG,KAAKkG,IAAIzJ,MAAMuD,KAAMrE,EAAMhC,SAAS0C,IAAI,SAASxC,GAAW,OAAOA,EAAQR,MAClFyG,EAAQmG,EAAU,EAAGnG,EAAQmG,EAAU,IAAKnG,IACjD,KAAI,WAGA,IAAMqG,EAAehE,EAAWnC,KAAKC,MAAMD,KAAKE,SAAWiC,EAAW3B,SAGlEpE,EAAsBE,EAAaD,IAAI,SAAAC,GAAY,OAAIA,EAAa/C,UAGlE6M,GAFNhK,EAAsB,GAAGI,OAAOC,MAAM,GAAIL,IAEGpC,OAAO,SAAA0C,GAAE,OAAIA,EAAGzC,WAAakM,EAAa9M,KAEjFgN,EAAqBD,EAAiBpG,KAAKC,MAAMD,KAAKE,SAAWkG,EAAiB5F,SAElF8F,EAAsBD,EAAmBpN,QAAQ+G,KAAKC,MAAMD,KAAKE,SAAWmG,EAAmBpN,QAAQuH,SAEvG+F,EAAYpK,EAAWhD,KAAK,SAAAwD,GAE9B,OAAI2J,EAAoBzJ,eAAe,iBAC5BF,EAAQtD,KAAOiN,EAAoBxJ,cAEnCH,EAAQtD,KAAOiN,EAAoBpM,UAIlD2L,EAASlM,SAASoB,KAAK,CACnB1B,GAAMyG,EACN0G,GAAM1G,EACN1C,KAAQ,iBAAmB0C,EAC3B7F,SAAYkM,EAAa9M,GACzBa,QAAWqM,EAAUlN,KA7BzB,GAiCF,MAAOoN,GACLpD,QAAQqD,KAAK,0DAA4Db,EAASlM,SAAS6G,QAC3FV,GAAS,EAKjB,OAAO+F,EAGX,GAAoB,qBAAhBD,EAAOlI,KAA6B,CACpC2F,QAAQC,IAAI,oBAGZ,IAOIqD,EAPEd,EAAWC,KAAKC,MAAMD,KAAKE,UAAUrK,IAErCiL,EAAchB,EAAOrI,UACrBsJ,EAAWjB,EAAOxI,KAClB0J,EAAclB,EAAO1L,QACrB6M,EAAenB,EAAO3L,SAGxB+M,EAAkBnB,EAASlM,SAASR,KAAK,SAACU,EAASiG,GACnD,OAAIjG,EAAQR,KAAOuN,IACfD,EAAgB7G,GACT,KAkBf,OAVAkH,EAAe3L,OAAA8B,EAAA,EAAA9B,CAAA,GACR2L,EADQ,CAEX5J,KAAMyJ,EACN3M,QAAS4M,EACT7M,SAAU8M,IAIdlB,EAASlM,SAASgN,GAAiBK,EAE5BnB,EAGX,OAAOlK,GC7GL8J,EAAgB,CAClB7G,qBAmBWD,MAXf,WAAyD,IAA/BhD,EAA+BgK,UAAAnF,OAAA,QAAAjG,IAAAoL,UAAA,GAAAA,UAAA,GAAvBF,EAE9B,OAFqDE,UAAAnF,OAAA,EAAAmF,UAAA,QAAApL,GAQ9CoB,GALH0H,QAAQC,IAAI,aAEL3H,ICdT8J,EAAgB,CAClBxM,eAwBWwF,MAhBf,WAAuD,IAA/B9C,EAA+BgK,UAAAnF,OAAA,QAAAjG,IAAAoL,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAAnF,OAAA,EAAAmF,UAAA,QAAApL,EAEnD,OAAKqL,GAMDA,EAAOlI,KAIJ/B,IATH0H,QAAQC,IAAI,aAEL3H,ICdT8J,EAAgB,CAClBlM,eAuBWmF,MAff,WAAuD,IAA/B/C,EAA+BgK,UAAAnF,OAAA,QAAAjG,IAAAoL,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAAnF,OAAA,EAAAmF,UAAA,QAAApL,EAEnD,OAAKqL,GAMDA,EAAOlI,KACA/B,IANP0H,QAAQC,IAAI,aAEL3H,ICdT8J,EAAgB,CAClB3B,gBAsBW4B,MAdf,WAAuD,IAA/B/J,EAA+BgK,UAAAnF,OAAA,QAAAjG,IAAAoL,UAAA,GAAAA,UAAA,GAAvBF,EAE5B,OAFmDE,UAAAnF,OAAA,EAAAmF,UAAA,QAAApL,GAU5CoB,GAPH0H,QAAQC,IAAI,aAEL3H,ICdT8J,EAAgB,CAClBzC,eAkBWiE,MAVf,WAAsD,IAA/BtL,EAA+BgK,UAAAnF,OAAA,QAAAjG,IAAAoL,UAAA,GAAAA,UAAA,GAAvBF,EAC3B,OADkDE,UAAAnF,OAAA,EAAAmF,UAAA,QAAApL,GAO3CoB,GALH0H,QAAQC,IAAI,aAEL3H,ICKAuL,EAXKC,YAAgB,CAChC9F,iBACA1C,mBACAF,iBACAC,iBACA8G,iBACAvC,kBCVWmE,EAFDC,YAAYH,GC+BXI,OAvBf,WAGE,OAFAzL,OAAO0L,UAAYA,EACnB1L,OAAO2L,KAAOC,0BAEZrP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAekP,SAAUD,2BACvBrP,EAAAC,EAAAC,cAACqP,EAAA,EAAD,CAAUP,MAAOG,GACfnP,EAAAC,EAAAC,cAACsP,EAAA,EAAD,CAAOC,KAAK,KAEVzP,EAAAC,EAAAC,cAACsP,EAAA,EAAD,KAEExP,EAAAC,EAAAC,cAACsP,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,OAAQ,kBAAO3P,EAAAC,EAAAC,cAACsP,EAAA,EAAD,CAAUnP,GAAI,iBAC1DL,EAAAC,EAAAC,cAACsP,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAO,EAAME,UAAW1G,IAChDlJ,EAAAC,EAAAC,cAACsP,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAO,EAAME,UAAWrE,IAEhDvL,EAAAC,EAAAC,cAACsP,EAAA,EAAD,CAAOI,UAAWlP,SCbVmP,QACW,cAA7BpM,OAAOqM,SAASC,UAEe,UAA7BtM,OAAOqM,SAASC,UAEhBtM,OAAOqM,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO3P,EAAAC,EAAAC,cAACgQ,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.97507af2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nexport default class Header extends Component {\n\n    render() {\n        return (\n            <div className=\"bg-header\">\n                <header className=\"header-main container\">\n\n                    <Link to=\"/\" className=\"logo\" title=\"Evolucional\"><img alt=\"Evolucional\" src=\"http://www.evolucional.com.br/Public/images/logo-evolucional.png\" /></Link>\n\n                    <span className=\"btn-menu\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </span>\n\n                    <nav className=\"menu\">\n                        <ul>\n                            <li><Link to=\"/\" title=\"Home\">HOME</Link></li>\n                            \n                            <li><Link to=\"/students\" title=\"\">Estudantes</Link></li>\n                            <li><Link to=\"/teachers\" title=\"\">Professores</Link></li>\n                            \n                            {/* <li><Link href=\"/experimente\" className=\"hide\" title=\"Promoçãp\">EXPERIMENTE </Link></li> */}\n                        </ul>\n                    </nav>\n                </header>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Header from './Header';\nexport default class NotFound extends Component {\n\n    render() {\n        return (\n            <div className=\"\">\n                <Header/>\n                <div className=\"body\">\n                    <h1>Página não encontrada</h1>\n                </div>\n            </div>\n        );\n    }\n}   ","export function getClassById(classes, class_id){\n    return classes.find(_class => _class.id === class_id);\n}\n\nexport function getDegreeById(degrees, degree_id){\n    return degrees.find(degree => degree.id === degree_id);\n}\n\nexport function getMatterById(matters, matter_id){\n    return matters.find(matter => matter.id === matter_id);\n}\n\nexport function getStudentById(students, student_id){\n    return students.find(student => student.id === student_id);\n}\n\nexport function  getClassesOfADegree(classes, relations, degreeId) {\n\n    const allClasses = classes;\n    const allRelations = relations;\n\n    let allRelationsDegrees = allRelations.map(allRelations => allRelations.degrees); // get only degrees relationship\n    allRelationsDegrees = [].concat.apply([], allRelationsDegrees); // merge in a single list\n\n    const allDegreesWithId = allRelationsDegrees.filter(el => el.degreeId === degreeId);\n\n    let classesForThisDegree = allDegreesWithId.map(el => el.classes);\n    classesForThisDegree = [].concat.apply([], classesForThisDegree);\n\n    const listOfClasses = allClasses.filter(a_class => {\n        return (classesForThisDegree.find(b_class => {\n            // the data are inconsistent: some relatioships have key \"classPosition\" others \"classId\" \n            if (b_class.hasOwnProperty(\"classPosition\")) {\n                b_class.id = b_class.classPosition\n            } else {\n                b_class.id = b_class.classId;\n            }\n\n            return b_class.id === a_class.id\n        }))\n    });\n\n\n\n    return listOfClasses;\n}\n\n/**\n * Filter also by teacher_id\n * @param {*} classes \n * @param {*} relations \n * @param {*} degreeId \n * @param {*} teacher_id \n */\nexport function  getClassesOfADegree2(classes, relations, degreeId, teacher_id) {\n\n   let listOfClasses = []\n   let degrees_relation = [];\n\n   for (const relation of relations) {\n        if (relation.teacherId === teacher_id){\n\n            degrees_relation = degrees_relation.concat(relation.degrees);\n            \n            for (const degree_relation of relation.degrees) {\n                if (degree_relation.degreeId === degreeId){\n                   for (const class_ of degree_relation.classes) {\n                        \n                        // the data are inconsistent: some relatioships have key \"classPosition\" others \"classId\" \n                        if (class_.hasOwnProperty(\"classPosition\")) {\n                            class_.id = class_.classPosition\n                        } else {\n                            class_.id = class_.classId;\n                        }\n                        \n                        listOfClasses.push(getClassById(classes, class_.id));\n                   }\n                }\n            }\n        }\n    }\n\n    return listOfClasses;\n}\n\nexport function getDegreesOfATeacher(relations, degrees, teacher_id){\n    \n    // let degrees_relation = [];\n    const degrees_found = [];\n\n    for (const relation of relations) {\n        if (relation.teacherId === teacher_id){\n\n            // degrees_relation = degrees_relation.concat(relation.degrees);\n            \n            for (const degree_relation of relation.degrees) {\n                const getDegreeResult = getDegreeById(degrees, degree_relation.degreeId);\n                if(getDegreeResult){\n                    degrees_found.push(getDegreeResult);\n                }\n            }\n        }\n    }\n\n    return degrees_found;\n}\n\nexport function getStudentsOfAClass(students, class_id, degree_id) {\n    \n    const studentsOfTheSameClass = students.filter(student => (student.degreeId === degree_id && student.classId === class_id));\n    const students_result = [];\n    for (const student of studentsOfTheSameClass) {\n        students_result.push(getStudentById(students, student.id));\n    }\n\n    return students_result;\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport { Select, Button } from \"react-materialize\";\nimport * as studentActions from \"../actions/studentActions\";\nimport * as common from \"../utils/common\";\n\n\nclass EditStudentPopUp extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            studentToEdit: this.props.studentToEdit\n        }\n\n        window.editStudentPopUp = this;\n    }\n\n    closePopUp() {\n        $(\"#editStudent\").hide(500);\n    }\n\n    getClassesOfADegree(degreeId) {\n\n        const allClasses = this.props.classes;\n        const allRelations = this.props.relations;\n\n        return common.getClassesOfADegree(allClasses, allRelations, degreeId);\n    }\n\n    updateForm(evt, what) {\n\n        if (what === \"name\") {\n            this.setState({\n                ...this.state,\n                studentToEdit: { ...this.state.studentToEdit, name: evt.target.value }\n            });\n        }\n\n        else if (what === \"degree\") {\n            this.setState({\n                ...this.state,\n                studentToEdit: { ...this.state.studentToEdit, degreeId: parseInt(evt.target.value, 0) }\n            });\n        }\n\n        else if (what === \"class\") {\n            this.setState({\n                ...this.state,\n                studentToEdit: { ...this.state.studentToEdit, classId: parseInt(evt.target.value, 0) }\n            });\n\n        }\n\n    }\n\n    updateStateFromProps() {\n        // We are reusing this popup, so we might want to change the state in two cases:\n        // - initial state: state is null\n        // - using for multiples users\n        if (!this.state.studentToEdit ||\n            (this.state.studentToEdit && this.state.studentToEdit.id !== this.props.studentToEdit.id)) {\n                // eslint-disable-next-line\n                this.state = ({\n                    ...this.state,\n                    studentToEdit: this.props.studentToEdit\n                })\n            }\n    }\n\n    applyChange(evt) {\n        evt.preventDefault();\n\n        this.props.dispatch(studentActions.editOneStudent(\n            this.state.studentToEdit.id,\n            this.state.studentToEdit.name,\n            this.state.studentToEdit.classId,\n            this.state.studentToEdit.degreeId\n        ));\n\n        this.closePopUp();\n    }\n\n\n\n    render() {\n        if (this.props.studentToEdit) {\n            this.updateStateFromProps();\n            return (\n                <div className=\"\">\n                    <div className=\"hover_bkgr_fricc\" id=\"editStudent\" >\n                        <span className=\"helper\"></span>\n                        <div>\n                            <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n                            <form>\n                                <input type=\"text\" value={this.state.studentToEdit.name} onChange={(evt) => this.updateForm(evt, \"name\")} />\n\n                                <Select value={this.state.studentToEdit.degreeId.toString()} onChange={(evt) => this.updateForm(evt, \"degree\")}>\n                                    <option value=\"\" disabled> Escolha um Grau </option>\n                                    {this.props.degrees.map(degree => {\n                                        return (\n                                            <option value={degree.id} key={degree.id} > {degree.name} </option>\n                                        )\n\n                                    })}\n                                </Select>\n\n                                <Select value={this.state.studentToEdit.classId.toString()} onChange={(evt) => this.updateForm(evt, \"class\")}>\n                                    <option value=\"\" disabled> Escolha uma classe </option>\n                                    {this.getClassesOfADegree(this.state.studentToEdit.degreeId).map(class_ => {\n                                        return (\n                                            <option value={class_.id} key={class_.id} > {class_.name} </option>\n                                        )\n                                    })}\n                                </Select>\n\n                                <Button onClick={(evt) => this.applyChange(evt)}>Aplicar</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return <div></div>\n        }\n    }\n}\n\n\n\nfunction mapStateToProps(state) {\n    return {\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n    }\n}\n\nexport default connect(mapStateToProps)(EditStudentPopUp);","export function createMoreStudents(allDegrees, allRelations, allClasses) {\n\n    return {\n        type: \"CREATE_MORE_STUDENTS\",\n        allDegrees,\n        allRelations,\n        allClasses\n    }\n}\n\n\nexport function editOneStudent(studentId, name, classId,  degreeId) {\n\n    return {\n        type: \"EDIT_ONE_STUDENT\",\n        studentId, \n        name, \n        classId, \n        degreeId\n    }\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport { Bar } from \"react-chartjs-2\";\n\n\nclass StudentChart extends Component {\n\n    constructor(props){\n        super(props);\n\n        window.studentChart = this;\n    }\n\n    closePopUp() {\n        $(\"#studentChart\").hide(500);\n    }\n\n    countStudentsInDegree(students) {\n\n \n        // compressed is a object key:value, where key is degreeId and value is the count_of_student\n        var compressed = {};\n\n        for (const student of students) {\n            if (compressed.hasOwnProperty(student.degreeId )){\n                compressed[student.degreeId] = compressed[student.degreeId]+1;\n            }\n            else{\n                compressed[student.degreeId] = 1;\n            }\n        }\n        \n\n        var ret = [];\n        // get cont in exact order of degree store\n        for (const degreeId of this.props.degrees.map(el => el.id)) {\n            ret.push(isNaN(compressed[degreeId]) ? 0 : compressed[degreeId]);\n        }\n\n        return ret;\n    };\n\n    \n    //Function to generate new colors\n    getRandomColors(numberOfColors) {\n        const colors = [];\n        for (let index = 0; index < numberOfColors; index++) {\n            // range between 0 e 255\n            var r = Math.floor(Math.random() * 255).toString();\n            var g = Math.floor(Math.random() * 255).toString();\n            var b = Math.floor(Math.random() * 255).toString();\n            \n            // push in colors array\n            colors.push({\"background\" : 'rgba('+r+', '+g+', '+b+', 0.5)', \"border\": 'rgba('+r+', '+g+', '+b+', 1)'});\n        }\n\n        return colors;\n      \n    }\n    \n\n    buildDataInFormatOfChartJS() {\n        const colors = this.getRandomColors(this.props.degrees.length);\n        return {\n            labels: this.props.degrees.map(el => el.name),\n            datasets: [{\n                label: 'Estudantes por Classe',\n                // data: [12, 19, 3, 5, 2, 3],\n                data: this.countStudentsInDegree(this.props.students),\n                backgroundColor: colors.map(el=>el.background),\n                borderColor: colors.map(el=>el.border),\n                borderWidth: 1\n            }]\n        };\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"\">\n                <div className=\"hover_bkgr_fricc\" id=\"studentChart\" /* style={{ display: this.props.visible ? 'block' : 'none' }} */ >\n                    <span className=\"helper\"></span>\n                    <div>\n                        <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n\n                        {/* <img src={in_development_image} alt=\"in development\" style={{ width: \"186px\" }} /> */}\n                        <Bar\n                            data={this.buildDataInFormatOfChartJS()}\n                            // width={100}\n                            // height={50}\n                            options={{ maintainAspectRatio: true }}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        students: state.studentReducer.students,\n        degrees: state.degreesReducer.degrees,\n    }\n}\n\nexport default connect(mapStateToProps)(StudentChart);","import React, { Component } from 'react';\nimport Header from './Header';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport * as studentActions from \"../actions/studentActions\";\nimport EditStudentPopup from './EditStudentPopup';\nimport { Button } from 'react-materialize';\nimport StudentChart from \"./StudentChart\";\nimport * as common from \"../utils/common\"\n\nwindow.$ = $; // to use in terminal while developing\n\n\nclass Students extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            studentToEdit : this.props.students[0]\n        }\n\n    }\n\n    getClassById(class_id) {\n        return common.getClassById(this.props.classes, class_id);\n    }\n\n    getDegreeById(degreeId) {\n        return common.getDegreeById(this.props.degrees, degreeId);\n    }\n\n    applyFilter(evt) {\n        evt.preventDefault();\n\n        const userName = $(\"form.filters-wrapper\").find(\"input#studentNameFilter\").val().toLowerCase();\n        const userDegree = $(\"form.filters-wrapper\").find(\"input#studentDegreeFilter\").val().toLowerCase();\n        const userClass = $(\"form.filters-wrapper\").find(\"input#studentClassFilter\").val().toLowerCase();\n\n        const table_tbody = $(\"table#studentTable\").find(\"tbody\");\n\n        table_tbody.find(\"tr\").show();\n\n        // filter by user name\n        if(userName){\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.studentName\").text().toLowerCase().includes(userName)){\n                    $(tr).show();\n                }\n                else{\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by degree\n        if(userDegree){\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.studentDegree\").text().toLowerCase().includes(userDegree)){\n                    $(tr).show();\n                }\n                else{\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by class\n        if(userClass){\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.studentClass\").text().toLowerCase().includes(userClass)){\n                    $(tr).show();\n                }\n                else{\n                    $(tr).hide();\n                }\n            });\n        }\n\n    }\n\n    createMoreStudents(){\n        this.props.dispatch((studentActions.createMoreStudents(this.props.degrees, this.props.relations, this.props.classes)));\n        alert(\"300 Estudantes criados\");\n    }\n\n    editOneStudent(studentToEdit){\n        \n        $(\"#editStudent\").show(500);\n\n        this.setState({\n            studentToEdit\n        });\n\n        \n    }\n\n    showChart(){\n        $(\"#studentChart\").show(500);\n    }\n\n    render() {\n        const students = this.props.students;\n        return (\n            <div className=\"\">\n                <Header />\n                <div className=\"body\">\n                    <h1>Estudantes</h1>\n\n                    <form className=\"filters-wrapper\" onSubmit={(evt) => { this.applyFilter(evt) }}>\n                        <input type=\"text\" placeholder=\"Nome do Aluno\" id=\"studentNameFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Graduação do Aluno\" id=\"studentDegreeFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Classe do Aluno\" id=\"studentClassFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                    </form>\n\n                    <div style={{margin: \"19px 0\"}} className=\"spaceElements\">\n                        \n                        <Button onClick={() => this.createMoreStudents()}> Gerar mais estudantes </Button>\n                        <Button onClick={() => this.showChart()}> Mostrar Gráfico </Button>\n                    </div>\n\n                    <table className=\"highlight\" id=\"studentTable\">\n                        <thead>\n                            <tr>\n                                <th>Nome</th>\n                                <th>Grau</th>\n                                <th>Classe</th>\n                                <th>Editar</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {students.map(student => (\n                                <tr key={student.id}>\n                                    <td className=\"studentName\">{student.name}</td>\n                                    <td className=\"studentDegree\">{this.getDegreeById(student.degreeId).name}</td>\n                                    <td className=\"studentClass\">{this.getClassById(student.classId).name}</td>\n                                    <td className=\"StudentEdit\" onClick={() => this.editOneStudent(student)}>\n                                        <i style={{fontSize:\"23px\"}} className=\"fa\">&#xf044;</i>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n\n                 \n\n                </div>\n            \n                <EditStudentPopup studentToEdit={this.state.studentToEdit}  />\n                \n                <StudentChart />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        students: state.studentReducer.students,\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n        matters: state.matterReducer.matters,\n\n    }\n}\n\nexport default connect(mapStateToProps)(Students);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport inDevelopmentImage from \"../images/in_development.png\";\nimport $ from \"jquery\";\n\n\nclass StudentsOfClassPopUp extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // while developing only\n        window.studentsOfClassPopUp = this;\n    }\n    closePopUp() {\n        $(\"#showStudentsPopup\").hide(500);\n    }\n\n    render() {\n        const students = this.props.studentsToShow;\n        console.log('students', students);\n        return (\n            <div className=\"\">\n                <div className=\"hover_bkgr_fricc\" id=\"showStudentsPopup\" >\n                    <span className=\"helper\"></span>\n                    <div>\n                        <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n\n                        {!(students.length>0) && (\n                            <div>\n                                <h2>In development</h2>\n\n                                <img style={{ width: \"30%\" }} src={inDevelopmentImage} alt=\"\" />\n                            </div>\n                        )}\n\n                        {(students.length>0) && (\n                            <div style={{overflowY: \"auto\",maxHeight: \"473px\"}}>\n                                <table className=\"highlight\">\n                                    <thead>\n                                        <tr>\n                                            <th>-</th>\n                                            <th>Nome</th>\n\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {students.map((student, index) => (\n                                            <tr key={student.id}>\n                                                <td>{index+1}</td>\n                                                <td>{student.name}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps)(StudentsOfClassPopUp);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Header from './Header';\nimport * as common from \"../utils/common\";\nimport $ from \"jquery\";\nimport StudentsOfClassPopUp from './StudentsOfClassPopUp';\n\nclass Teachers extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            studentsToShow: []\n        }\n\n    }\n\n    applyFilter(evt) {\n        evt.preventDefault();\n\n        const userName = $(\"form.filters-wrapper\").find(\"input#teacherNameFilter\").val().toLowerCase();\n        const userDegree = $(\"form.filters-wrapper\").find(\"input#teacherDegreeFilter\").val().toLowerCase();\n        const userClass = $(\"form.filters-wrapper\").find(\"input#teacherClassFilter\").val().toLowerCase();\n        const userMatter = $(\"form.filters-wrapper\").find(\"input#teacherMatterFilter\").val().toLowerCase();\n\n        const table_tbody = $(\"table#teacherTable\").find(\"tbody\");\n\n        table_tbody.find(\"tr\").show();\n\n        // filter by user name\n        if (userName) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherName\").text().toLowerCase().includes(userName)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by degree\n        if (userDegree) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherDegree\").text().toLowerCase().includes(userDegree)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by class\n        if (userClass) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherClass\").text().toLowerCase().includes(userClass)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by matter\n        if (userMatter) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherMatter\").text().toLowerCase().includes(userMatter)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n    }\n\n    showStudents(teacher_id, degree_id, class_id, ) {\n        console.log('teacher_id', teacher_id);\n        console.log('degree_id', degree_id);\n        console.log('class_id', class_id);\n\n        const students = this.props.students;\n\n        this.setState({\n            studentsToShow: common.getStudentsOfAClass(students, class_id, degree_id)\n        });\n\n        $(\"#showStudentsPopup\").show(500);\n    }\n\n    render() {\n        const teachers = this.props.teachers;\n        const relations = this.props.relations;\n        const degrees = this.props.degrees;\n        const classes = this.props.classes;\n\n        return (\n            <div className=\"\">\n                <Header />\n                <div className=\"body\">\n                    <h1>Professores</h1>\n\n                    <form className=\"filters-wrapper\" onSubmit={(evt) => { this.applyFilter(evt) }}>\n                        <input type=\"text\" placeholder=\"Nome do Professor\" id=\"teacherNameFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Nome da Matéria\" id=\"teacherMatterFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Graduação do Professor\" id=\"teacherDegreeFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Classe do Professor\" id=\"teacherClassFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                    </form>\n\n                    <table className=\"highlight\" id=\"teacherTable\">\n                        <thead>\n                            <tr>\n                                <th>Nome</th>\n                                <th>Matéria</th>\n                                <th>Grau</th>\n                                <th>Classe</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {teachers.map(teacher => (\n                                common.getDegreesOfATeacher(relations, degrees, teacher.id).map(degree => {\n                                    return common.getClassesOfADegree2(classes, relations, degree.id, teacher.id).map(class_ => (\n                                        <tr key={teacher.id + \"-\" + degree.id + \"-\" + class_.id}>\n                                            <td className=\"teacherName\">{teacher.name}</td>\n                                            <td className=\"teacherMatter\">{\"TODO: get matter of teacher.id \" + teacher.id}</td>\n                                            <td className=\"teacherDegree\">{degree.name}</td>\n                                            <td className=\"teacherClass myLink\" onClick={() => this.showStudents(teacher.id, degree.id, class_.id)}>{class_.name}</td>\n                                        </tr>\n                                    ))\n                                }))\n                            )}\n                        </tbody>\n                    </table>\n\n\n                </div>\n\n                <StudentsOfClassPopUp studentsToShow={this.state.studentsToShow}/>\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        students: state.studentReducer.students,\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n        teachers: state.teacherReducer.teachers\n    }\n}\n\nexport default connect(mapStateToProps)(Teachers);","import students from \"../jsons/students.json\";\n\nconst INITIAL_STATE = {\n    students: students\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction StudentReducer(state = INITIAL_STATE, action) {\n\n    if (!action) {\n        console.log(\"No action\");\n\n        return state;\n    }\n\n    if (action.type === \"CREATE_MORE_STUDENTS\") {\n        console.log(\"CREATE_MORE_STUDENTS\");\n\n        const allDegrees = action.allDegrees;\n        const allRelations = action.allRelations;\n        const allClasses = action.allClasses;\n\n        // colone original state\n        const newState = JSON.parse(JSON.stringify(state));\n\n        // get last id of a student\n        const last_id = Math.max.apply(Math, state.students.map(function(student) { return student.id; }));\n        for (let index = last_id + 1; index < last_id + 300; index++) {\n            try {\n\n                // get random degreeID\n                const randomDegree = allDegrees[Math.floor(Math.random() * allDegrees.length)];\n\n                // get random classID of this degree (like a join in sql)\n                let allRelationsDegrees = allRelations.map(allRelations => allRelations.degrees); // get only degrees relationship\n                allRelationsDegrees = [].concat.apply([], allRelationsDegrees); // merge in a single list\n\n                const allDegreesWithId = allRelationsDegrees.filter(el => el.degreeId === randomDegree.id);\n\n                const randomDegreeWithId = allDegreesWithId[Math.floor(Math.random() * allDegreesWithId.length)];\n\n                const randomClassPosition = randomDegreeWithId.classes[Math.floor(Math.random() * randomDegreeWithId.classes.length)];\n\n                const the_class = allClasses.find(a_class => {\n                    // the data are inconsistent: some relatioships have key \"classPosition\" others \"classId\" \n                    if (randomClassPosition.hasOwnProperty(\"classPosition\")) {\n                        return a_class.id === randomClassPosition.classPosition;\n                    } else {\n                        return a_class.id === randomClassPosition.classId;\n                    }\n                });\n\n                newState.students.push({\n                    \"id\": index,\n                    \"ra\": index,\n                    \"name\": \"Nome do aluno \" + index,\n                    \"degreeId\": randomDegree.id,\n                    \"classId\": the_class.id\n                });\n\n\n            } catch (error) {\n                console.warn(\"Some error with the data. Total of students until now: \" + newState.students.length);\n                index -= 1; // step back until the x students are make\n            }\n\n        }\n\n        return newState;\n    }\n\n    if (action.type === \"EDIT_ONE_STUDENT\") {\n        console.log(\"EDIT_ONE_STUDENT\");\n\n        // colone original state\n        const newState = JSON.parse(JSON.stringify(state));\n\n        const _student_id = action.studentId;\n        const new_name = action.name;\n        const new_classId = action.classId;\n        const new_degreeId = action.degreeId;\n\n        let student_index;\n        let studentToChange = newState.students.find((student, index) => {\n            if (student.id === _student_id){\n                student_index = index;\n                return true;\n            }\n            else{\n                return false;\n            }\n            \n        });\n\n        studentToChange = {\n            ...studentToChange,\n            name: new_name,\n            classId: new_classId,\n            degreeId: new_degreeId\n\n        }\n\n        newState.students[student_index] = studentToChange;\n\n        return newState;\n    }\n\n    return state;\n\n}\n\nexport default StudentReducer;","import relationships from \"../jsons/relationships.json\";\n\nconst INITIAL_STATE = {\n    relationships\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction relationsReducer(state = INITIAL_STATE, action) {\n\n    if (!action){\n        console.log(\"No action\");\n        \n        return state;\n    }\n\n    return state;\n}\n\nexport default relationsReducer;","import classes from \"../jsons/classes.json\";\n\nconst INITIAL_STATE = {\n    classes\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction classesReducer(state = INITIAL_STATE, action) {\n\n    if (!action){\n        console.log(\"No action\");\n        \n        return state;\n    }\n\n    if (action.type === \"\") {\n        \n    }\n\n    return state;\n\n}\n\nexport default classesReducer;","import degrees from \"../jsons/degrees.json\";\n\nconst INITIAL_STATE = {\n    degrees\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction degreesReducer(state = INITIAL_STATE, action) {\n\n    if (!action){\n        console.log(\"No action\");\n        \n        return state;\n    }\n\n    if (action.type === \"____\") {\n        return state;\n    }\n\n    return state;\n}\n\nexport default degreesReducer;","import teachers from \"../jsons/teachers.json\";\n\nconst INITIAL_STATE = {\n    teachers: teachers\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction StudentReducer(state = INITIAL_STATE, action) {\n\n    if (!action) {\n        console.log(\"No action\");\n\n        return state;\n    }\n\n\n\n    return state;\n\n}\n\nexport default StudentReducer;","import matters from \"../jsons/matters.json\";\n\nconst INITIAL_STATE = {\n    matters\n}\n\n/** \n* @param state\n* @param action\n* @returns state\n*/\nfunction MatterReducer(state = INITIAL_STATE, action) {\n    if (!action) {\n        console.log(\"No action\");\n\n        return state;\n    }\n\n    return state;\n\n}\nexport default MatterReducer;","import { combineReducers } from \"redux\";\nimport studentReducer from \"./StudentReducer\"\nimport relationsReducer from \"./RelationshipsReducer\"\nimport classesReducer from \"./ClassesReducer\"\nimport degreesReducer from \"./DegreesReducer\"\nimport teacherReducer from \"./TeacherReducer\"\nimport matterReducer from \"./MatterReducer\"\n\n\nconst rootReducer = combineReducers({\n    studentReducer,\n    relationsReducer,\n    classesReducer,\n    degreesReducer,\n    teacherReducer,\n    matterReducer\n\n    \n});\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport './css/App.css';\nimport './css/main.css';\nimport './css/materialize.css';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport NotFound from './components/NotFound';\nimport Students from \"./components/Students\";\nimport Teachers from \"./components/Teachers\";\nimport rootStore from \"./store\"\nimport { Provider } from \"react-redux\";\n\nfunction App() {\n  window.rootStore = rootStore;\n  window.test = process.env.PUBLIC_URL;\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={rootStore}>\n        <Route path=\"/\">\n\n          <Switch>\n\n            <Route path=\"/\" exact={true} render={() => (<Redirect to={\"/students\"} />)} />\n            <Route path=\"/students\" exact={true} component={Students} />\n            <Route path=\"/teachers\" exact={true} component={Teachers} />\n\n            <Route component={NotFound} />\n          </Switch>\n\n        </Route>\n      </Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/in_development.37956f1e.png\";"],"sourceRoot":""}