{"version":3,"sources":["components/Header.jsx","components/NotFound.jsx","utils/common.js","components/EditStudentPopup.jsx","actions/studentActions.js","components/StudentChart.jsx","components/Students.jsx","components/StudentsToShowPopup.jsx","components/CreateProfessorPopup.jsx","actions/TeacherActions.js","actions/relationsActions.js","components/Teachers.jsx","store/reducers/StudentReducer.js","store/reducers/RelationshipsReducer.js","store/reducers/ClassesReducer.js","store/reducers/DegreesReducer.js","store/reducers/TeacherReducer.js","store/reducers/MatterReducer.js","store/reducers/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","title","alt","src","Component","NotFound","Header_Header","getClassById","classes","class_id","find","_class","id","getDegreeById","degrees","degree_id","degree","getStudentById","students","student_id","student","getStudentsOfAClass","studentsOfTheSameClass","filter","degreeId","classId","students_result","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","undefined","_step6","_iterator6","Symbol","iterator","next","done","value","push","err","return","getStudentsOfADegree","EditStudentPopUp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","studentToEdit","$","hide","relations","allClasses","allRelationsDegrees","map","allRelations","classesForThisDegree","concat","apply","el","a_class","b_class","hasOwnProperty","classPosition","common","evt","what","setState","objectSpread","name","target","parseInt","studentId","preventDefault","dispatch","type","closePopUp","_this2","updateStateFromProps","onClick","onChange","updateForm","lib","toString","disabled","key","getClassesOfADegree","class_","applyChange","connect","classesReducer","degreesReducer","relationsReducer","relationships","StudentChart","compressed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","ret","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","isNaN","numberOfColors","colors","index","r","Math","floor","random","g","b","background","border","getRandomColors","length","labels","datasets","label","data","countStudentsInDegree","backgroundColor","borderColor","borderWidth","react_chartjs_2_es","buildDataInFormatOfChartJS","options","maintainAspectRatio","studentReducer","window","Students","userName","val","toLowerCase","userDegree","userClass","table_tbody","show","each","_","tr","text","includes","allDegrees","alert","onSubmit","applyFilter","placeholder","style","margin","createMoreStudents","showChart","editOneStudent","fontSize","EditStudentPopup","components_StudentChart","matters","matterReducer","StudentsOfClassPopUp","studentsToShow","degreeOrClass","console","log","overflowY","maxHeight","teacherName","teacherDegree","teacherClass","teacherMatter","teacherId","teachers","create_new_teacher","matterId","new_relation","_this$props","createProfessor","matter","Button_default","teacherReducer","Teachers","userMatter","teacher","teacher_id","degrees_found","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","relation","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","getDegreeResult","listOfClasses","degrees_relation","degree_relation","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","showStudentsOfADegree","showStudentsOfAClass","StudentsToShowPopup","CreateProfessorPopup","INITIAL_STATE","StudentReducer","arguments","action","newState","JSON","parse","stringify","last_id","max","randomDegree","allDegreesWithId","randomDegreeWithId","randomClassPosition","the_class","ra","error","warn","student_index","_student_id","new_name","new_classId","new_degreeId","studentToChange","newRelation","newTeacher","MatterReducer","rootReducer","combineReducers","store","createStore","App","rootStore","test","process","basename","es","react_router","path","exact","render","component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAEqBA,mLAGb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAEdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,OAAOG,MAAM,eAAcN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,cAAcC,IAAI,sEAE7ER,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACZH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,cAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIC,MAAM,QAAnB,SAEJN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYC,MAAM,IAA3B,eACJN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAYC,MAAM,IAA3B,2BApBIG,aCAfC,mLAGb,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,kDAPkBO,yDCF/B,SAASG,EAAaC,EAASC,GAClC,OAAOD,EAAQE,KAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOH,IAGzC,SAASI,EAAcC,EAASC,GACnC,OAAOD,EAAQJ,KAAK,SAAAM,GAAM,OAAIA,EAAOJ,KAAOG,IAOzC,SAASE,EAAeC,EAAUC,GACrC,OAAOD,EAASR,KAAK,SAAAU,GAAO,OAAIA,EAAQR,KAAOO,IA8F5C,SAASE,EAAoBH,EAAUT,EAAUM,GAEpD,IAAMO,EAAyBJ,EAASK,OAAO,SAAAH,GAAO,OAAKA,EAAQI,WAAaT,GAAaK,EAAQK,UAAYhB,IAC3GiB,EAAkB,GAHuCC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAI/D,QAAAC,EAAAC,EAAsBV,EAAtBW,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA8C,KAAnCP,EAAmCW,EAAAM,MAC1CX,EAAgBY,KAAKrB,EAAeC,EAAUE,EAAQR,MALK,MAAA2B,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAQ/D,OAAOH,EAGJ,SAASe,EAAqBvB,EAAUH,GAI3C,OAFwBG,EAASK,OAAO,SAAAH,GAAO,OAAIA,EAAQI,WAAaT,QChHtE2B,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,cAAeR,EAAKD,MAAMS,eAJfR,4EAUfS,IAAE,gBAAgBC,KAAK,iDAGP9B,GAKhB,ODZD,SAA6BhB,EAAS+C,EAAW/B,GAEpD,IAAMgC,EAAahD,EAGfiD,EAFiBF,EAEkBG,IAAI,SAAAC,GAAY,OAAIA,EAAa7C,UAKpE8C,GAJJH,EAAsB,GAAGI,OAAOC,MAAM,GAAIL,IAEGlC,OAAO,SAAAwC,GAAE,OAAIA,EAAGvC,WAAaA,IAE9BkC,IAAI,SAAAK,GAAE,OAAIA,EAAGvD,UAkBzD,OAjBAoD,EAAuB,GAAGC,OAAOC,MAAM,GAAIF,GAErBJ,EAAWjC,OAAO,SAAAyC,GACpC,OAAQJ,EAAqBlD,KAAK,SAAAuD,GAQ9B,OANIA,EAAQC,eAAe,iBACvBD,EAAQrD,GAAKqD,EAAQE,cAErBF,EAAQrD,GAAKqD,EAAQxC,QAGlBwC,EAAQrD,KAAOoD,EAAQpD,OCV3BwD,CAHYrB,KAAKJ,MAAMnC,QACTuC,KAAKJ,MAAMY,UAE4B/B,sCAGrD6C,EAAKC,GAEC,SAATA,EACAvB,KAAKwB,SAAL1B,OAAA2B,EAAA,EAAA3B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAcP,OAAA2B,EAAA,EAAA3B,CAAA,GAAME,KAAKI,MAAMC,cAAlB,CAAiCqB,KAAMJ,EAAIK,OAAOrC,WAIrD,WAATiC,EACLvB,KAAKwB,SAAL1B,OAAA2B,EAAA,EAAA3B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAcP,OAAA2B,EAAA,EAAA3B,CAAA,GAAME,KAAKI,MAAMC,cAAlB,CAAiC5B,SAAUmD,SAASN,EAAIK,OAAOrC,MAAO,QAIzE,UAATiC,GACLvB,KAAKwB,SAAL1B,OAAA2B,EAAA,EAAA3B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAcP,OAAA2B,EAAA,EAAA3B,CAAA,GAAME,KAAKI,MAAMC,cAAlB,CAAiC3B,QAASkD,SAASN,EAAIK,OAAOrC,MAAO,yDAWrFU,KAAKI,MAAMC,eACXL,KAAKI,MAAMC,eAAiBL,KAAKI,MAAMC,cAAcxC,KAAOmC,KAAKJ,MAAMS,cAAcxC,MAElFmC,KAAKI,MAALN,OAAA2B,EAAA,EAAA3B,CAAA,GACOE,KAAKI,MADZ,CAEIC,cAAeL,KAAKJ,MAAMS,qDAK9BiB,GC5DT,IAAwBO,EAAWH,EAAMhD,EAAUD,ED6DlD6C,EAAIQ,iBAEJ9B,KAAKJ,MAAMmC,UC/DYF,EDgEnB7B,KAAKI,MAAMC,cAAcxC,GChEK6D,EDiE9B1B,KAAKI,MAAMC,cAAcqB,KCjEWhD,EDkEpCsB,KAAKI,MAAMC,cAAc3B,QClEqBD,EDmE9CuB,KAAKI,MAAMC,cAAc5B,SCjE1B,CACHuD,KAAM,mBACNH,YACAH,OACAhD,UACAD,cD+DAuB,KAAKiC,8CAKA,IAAAC,EAAAlC,KACL,OAAIA,KAAKJ,MAAMS,eACXL,KAAKmC,uBAEDvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,eACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKsF,QAAS,kBAAMF,EAAKD,cAAclF,UAAU,oBAAjD,KACAH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO1C,MAAOU,KAAKI,MAAMC,cAAcqB,KAAMW,SAAU,SAACf,GAAD,OAASY,EAAKI,WAAWhB,EAAK,WAEjG1E,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQjD,MAAOU,KAAKI,MAAMC,cAAc5B,SAAS+D,WAAYH,SAAU,SAACf,GAAD,OAASY,EAAKI,WAAWhB,EAAK,YACjG1E,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGmD,UAAQ,GAAzB,qBACCzC,KAAKJ,MAAM7B,QAAQ4C,IAAI,SAAA1C,GACpB,OACIrB,EAAAC,EAAAC,cAAA,UAAQwC,MAAOrB,EAAOJ,GAAI6E,IAAKzE,EAAOJ,IAAtC,IAA6CI,EAAOyD,KAApD,QAMZ9E,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQjD,MAAOU,KAAKI,MAAMC,cAAc3B,QAAQ8D,WAAYH,SAAU,SAACf,GAAD,OAASY,EAAKI,WAAWhB,EAAK,WAChG1E,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGmD,UAAQ,GAAzB,wBACCzC,KAAK2C,oBAAoB3C,KAAKI,MAAMC,cAAc5B,UAAUkC,IAAI,SAAAiC,GAC7D,OACIhG,EAAAC,EAAAC,cAAA,UAAQwC,MAAOsD,EAAO/E,GAAI6E,IAAKE,EAAO/E,IAAtC,IAA6C+E,EAAOlB,KAApD,QAKZ9E,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQH,QAAS,SAACd,GAAD,OAASY,EAAKW,YAAYvB,KAA3C,gBAQb1E,EAAAC,EAAAC,cAAA,mBArHYO,aAoIhByF,kBARf,SAAyB1C,GACrB,MAAO,CACH3C,QAAS2C,EAAM2C,eAAetF,QAAQA,QACtCM,QAASqC,EAAM4C,eAAejF,QAC9ByC,UAAWJ,EAAM6C,iBAAiBC,gBAI3BJ,CAAyBnD,WEtIlCwD,uLASE7C,IAAE,iBAAiBC,KAAK,mDAGNpC,GAIlB,IAAIiF,EAAa,GAJWC,GAAA,EAAAC,GAAA,EAAAC,OAAAxE,EAAA,IAM5B,QAAAyE,EAAAC,EAAsBtF,EAAtBe,OAAAC,cAAAkE,GAAAG,EAAAC,EAAArE,QAAAC,MAAAgE,GAAA,EAAgC,KAArBhF,EAAqBmF,EAAAlE,MACxB8D,EAAWjC,eAAe9C,EAAQI,UAClC2E,EAAW/E,EAAQI,UAAY2E,EAAW/E,EAAQI,UAAU,EAG5D2E,EAAW/E,EAAQI,UAAY,GAXX,MAAAe,GAAA8D,GAAA,EAAAC,EAAA/D,EAAA,YAAA6D,GAAA,MAAAI,EAAAhE,QAAAgE,EAAAhE,SAAA,WAAA6D,EAAA,MAAAC,GAgB5B,IAAIG,EAAM,GAhBkBC,GAAA,EAAAC,GAAA,EAAAC,OAAA9E,EAAA,IAkB5B,QAAA+E,EAAAC,EAAuB/D,KAAKJ,MAAM7B,QAAQ4C,IAAI,SAAAK,GAAE,OAAIA,EAAGnD,KAAvDqB,OAAAC,cAAAwE,GAAAG,EAAAC,EAAA3E,QAAAC,MAAAsE,GAAA,EAA4D,KAAjDlF,EAAiDqF,EAAAxE,MACxDoE,EAAInE,KAAKyE,MAAMZ,EAAW3E,IAAa,EAAI2E,EAAW3E,KAnB9B,MAAAe,GAAAoE,GAAA,EAAAC,EAAArE,EAAA,YAAAmE,GAAA,MAAAI,EAAAtE,QAAAsE,EAAAtE,SAAA,WAAAmE,EAAA,MAAAC,GAsB5B,OAAOH,0CAKKO,GAEZ,IADA,IAAMC,EAAS,GACNC,EAAQ,EAAGA,EAAQF,EAAgBE,IAAS,CAEjD,IAAIC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgB/B,WACpCgC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgB/B,WACpCiC,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAAgB/B,WAGxC0B,EAAO3E,KAAK,CAACmF,WAAe,QAAQN,EAAE,KAAKI,EAAE,KAAKC,EAAE,SAAUE,OAAU,QAAQP,EAAE,KAAKI,EAAE,KAAKC,EAAE,SAGpG,OAAOP,uDAMP,IAAMA,EAASlE,KAAK4E,gBAAgB5E,KAAKJ,MAAM7B,QAAQ8G,QACvD,MAAO,CACHC,OAAQ9E,KAAKJ,MAAM7B,QAAQ4C,IAAI,SAAAK,GAAE,OAAIA,EAAGU,OACxCqD,SAAU,CAAC,CACPC,MAAO,wBACPC,KAAMjF,KAAKkF,sBAAsBlF,KAAKJ,MAAMzB,UAC5CgH,gBAAiBjB,EAAOvD,IAAI,SAAAK,GAAE,OAAEA,EAAG0D,aACnCU,YAAalB,EAAOvD,IAAI,SAAAK,GAAE,OAAEA,EAAG2D,SAC/BU,YAAa,sCAMhB,IAAAxF,EAAAG,KAEL,OACIpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,gBACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKsF,QAAS,kBAAMvC,EAAKoC,cAAclF,UAAU,oBAAjD,KAGAH,EAAAC,EAAAC,cAACwI,EAAA,EAAD,CACIL,KAAMjF,KAAKuF,6BAGXC,QAAS,CAAEC,qBAAqB,eArFjCpI,aAuGZyF,kBAPf,SAAyB1C,GACrB,MAAO,CACHjC,SAAUiC,EAAMsF,eAAevH,SAC/BJ,QAASqC,EAAM4C,eAAejF,UAIvB+E,CAAyBK,GCnGxCwC,OAAOrF,EAAIA,QAGLsF,cAEF,SAAAA,EAAYhG,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,IACd/F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8F,GAAAzF,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,cAAgBR,EAAKD,MAAMzB,SAAS,IAJ1B0B,4EASLnC,GACT,OAAO2D,EAAoBrB,KAAKJ,MAAMnC,QAASC,yCAGrCe,GACV,OAAO4C,EAAqBrB,KAAKJ,MAAM7B,QAASU,uCAGxC6C,GACRA,EAAIQ,iBAEJ,IAAM+D,EAAWvF,IAAE,wBAAwB3C,KAAK,2BAA2BmI,MAAMC,cAC3EC,EAAa1F,IAAE,wBAAwB3C,KAAK,6BAA6BmI,MAAMC,cAC/EE,EAAY3F,IAAE,wBAAwB3C,KAAK,4BAA4BmI,MAAMC,cAE7EG,EAAc5F,IAAE,sBAAsB3C,KAAK,SAEjDuI,EAAYvI,KAAK,MAAMwI,OAGpBN,GACCK,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,kBAAkB4I,OAAOR,cAAcS,SAASX,GAC3DvF,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMfyF,GACCE,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,oBAAoB4I,OAAOR,cAAcS,SAASR,GAC7D1F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMf0F,GACCC,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,mBAAmB4I,OAAOR,cAAcS,SAASP,GAC5D3F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,sDF1EnB,IAA4BkG,EAAY7F,EAAcH,EEkFrDT,KAAKJ,MAAMmC,UFlFgB0E,EEkF4BzG,KAAKJ,MAAM7B,QFlF3B6C,EEkFoCZ,KAAKJ,MAAMY,UFlFjCC,EEkF4CT,KAAKJ,MAAMnC,QFhFzG,CACHuE,KAAM,uBACNyE,aACA7F,eACAH,gBE6EAiG,MAAM,iEAGKrG,GAEXC,IAAE,gBAAgB6F,KAAK,KAEvBnG,KAAKwB,SAAS,CACVnB,sDAOJC,IAAE,iBAAiB6F,KAAK,sCAGnB,IAAAjE,EAAAlC,KACC7B,EAAW6B,KAAKJ,MAAMzB,SAC5B,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkB4J,SAAU,SAACrF,GAAUY,EAAK0E,YAAYtF,KACpE1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,gBAAgBhJ,GAAG,oBAAoBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MAC1G1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,2BAAqBhJ,GAAG,sBAAsBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MACjH1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,kBAAkBhJ,GAAG,qBAAqBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,OAGjH1E,EAAAC,EAAAC,cAAA,OAAKgK,MAAO,CAACC,OAAQ,UAAWhK,UAAU,iBAEtCH,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQH,QAAS,kBAAMF,EAAK8E,uBAA5B,2BACApK,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQH,QAAS,kBAAMF,EAAK+E,cAA5B,yBAGJrK,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYc,GAAG,gBAC5BjB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAIRF,EAAAC,EAAAC,cAAA,aACKqB,EAASwC,IAAI,SAAAtC,GAAO,OACjBzB,EAAAC,EAAAC,cAAA,MAAI4F,IAAKrE,EAAQR,IACbjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAesB,EAAQqD,MACrC9E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBmF,EAAKpE,cAAcO,EAAQI,UAAUiD,MACpE9E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBmF,EAAK1E,aAAaa,EAAQK,SAASgD,MACjE9E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcqF,QAAS,kBAAMF,EAAKgF,eAAe7I,KAC3DzB,EAAAC,EAAAC,cAAA,KAAGgK,MAAO,CAACK,SAAS,QAASpK,UAAU,MAAvC,iBAWxBH,EAAAC,EAAAC,cAACsK,EAAD,CAAkB/G,cAAeL,KAAKI,MAAMC,gBAE5CzD,EAAAC,EAAAC,cAACuK,EAAD,cA1IOhK,aA2JRyF,kBAXf,SAAyB1C,GACrB,MAAO,CACHjC,SAAUiC,EAAMsF,eAAevH,SAC/BV,QAAS2C,EAAM2C,eAAetF,QAAQA,QACtCM,QAASqC,EAAM4C,eAAejF,QAC9ByC,UAAWJ,EAAM6C,iBAAiBC,cAClCoE,QAASlH,EAAMmH,cAAcD,UAKtBxE,CAAyB8C,GCnKlC4B,uLAUElH,IAAE,sBAAsBC,KAAK,sCAGxB,IAAAV,EAAAG,KACC7B,EAAW6B,KAAKJ,MAAM6H,eACrBC,EAAiB1H,KAAKJ,MAAtB8H,cAEP,OADAC,QAAQC,IAAI,WAAYzJ,GAEpBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,qBACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKsF,QAAS,kBAAMvC,EAAKoC,cAAclF,UAAU,oBAAjD,OAEGoB,EAAS0G,OAAO,IACfjI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wCAAgC4K,IAKtCvJ,EAAS0G,OAAO,GACdjI,EAAAC,EAAAC,cAAA,OAAKgK,MAAO,CAACe,UAAW,OAAOC,UAAW,UACtClL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,oBAKRF,EAAAC,EAAAC,cAAA,aACKqB,EAASwC,IAAI,SAACtC,EAAS8F,GAAV,OACVvH,EAAAC,EAAAC,cAAA,MAAI4F,IAAKrE,EAAQR,IACbjB,EAAAC,EAAAC,cAAA,UAAKqH,EAAM,GACXvH,EAAAC,EAAAC,cAAA,UAAKuB,EAAQqD,sBA9C1BrE,aAmEpByF,kBANf,SAAyB1C,GACrB,MAAO,IAKI0C,CAAyB0E,wBC/DlCA,uLAUElH,IAAE,oBAAoBC,KAAK,6CAGfe,GACZA,EAAIQ,iBAEJ,IAAMiG,EAAgBzH,IAAE,gBAAgBwF,MAClCkC,EAAgBpG,SAAStB,IAAE,kBAAkBwF,OAC7CmC,EAAgBrG,SAAStB,IAAE,iBAAiBwF,OAC5CoC,EAAiBtG,SAAStB,IAAE,kBAAkBwF,OAC9CqC,EAAanI,KAAKJ,MAAMwI,SAASvD,OAAO,EAE9C7E,KAAKJ,MAAMmC,SC/BZ,SAA4BgG,EAAaI,GAC5C,MAAO,CACHnG,KAAM,qBACN+F,cACAI,aD2BoBE,CAAmBN,EAAaI,IACpDnI,KAAKJ,MAAMmC,SEhCZ,SAAsBoG,EAAWG,EAAU7J,EAAU2C,GACxD,MAAO,CACHY,KAAK,sBACLmG,YACAG,WACA7J,WACA2C,iBF0BoBmH,CAAaJ,EAAUD,EAAcF,EAAeC,IAExEvB,MAAM,mCACN1G,KAAKiC,8CAIA,IAAApC,EAAAG,KAAAwI,EAC+BxI,KAAKJ,MAAlCnC,EADF+K,EACE/K,QAASM,EADXyK,EACWzK,QAASuJ,EADpBkB,EACoBlB,QACzB,OACI1K,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBc,GAAG,mBACjCjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAChBH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKsF,QAAS,kBAAMvC,EAAKoC,cAAclF,UAAU,oBAAjD,KAEAH,EAAAC,EAAAC,cAAA,QAAM6J,SAAU,SAACrF,GAAD,OAASzB,EAAK4I,gBAAgBnH,KAE1C1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAOnE,GAAG,gBAGtBjB,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQ1E,GAAG,iBACPjB,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGmD,UAAQ,GAAzB,iCACC1E,EAAQ4C,IAAI,SAAAiC,GACT,OACIhG,EAAAC,EAAAC,cAAA,UAAQwC,MAAOsD,EAAO/E,GAAI6E,IAAKE,EAAO/E,IAAtC,IAA6C+E,EAAOlB,KAApD,QAMZ9E,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQ1E,GAAG,gBACPjB,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGmD,UAAQ,GAAzB,wBACChF,EAAQkD,IAAI,SAAAiC,GACT,OACIhG,EAAAC,EAAAC,cAAA,UAAQwC,MAAOsD,EAAO/E,GAAI6E,IAAKE,EAAO/E,IAAtC,IAA6C+E,EAAOlB,KAApD,QAMZ9E,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQ1E,GAAG,iBACPjB,EAAAC,EAAAC,cAAA,UAAQwC,MAAM,GAAGmD,UAAQ,GAAzB,4BACC6E,EAAQ3G,IAAI,SAAA+H,GACT,OACI9L,EAAAC,EAAAC,cAAA,UAAQwC,MAAOoJ,EAAO7K,GAAI6E,IAAKgG,EAAO7K,IAAtC,IAA6C6K,EAAOhH,KAApD,QAKZ9E,EAAAC,EAAAC,cAAC6L,EAAA9L,EAAD,yBAzEOQ,aA8FpByF,kBAVf,SAAyB1C,GACrB,MAAO,CACH3C,QAAS2C,EAAM2C,eAAetF,QAAQA,QACtCM,QAASqC,EAAM4C,eAAejF,QAC9ByC,UAAWJ,EAAM6C,iBAAiBC,cAClCkF,SAAUhI,EAAMwI,eAAeR,SAC/Bd,QAASlH,EAAMmH,cAAcD,UAItBxE,CAAyB0E,GG9FlCqB,cAEF,SAAAA,EAAYjJ,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6I,IACfhJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+I,GAAA1I,KAAAH,KAAMJ,KACDQ,MAAQ,CACTqH,eAAgB,GAChBC,cAAe,IAJJ7H,2EASPyB,GACRA,EAAIQ,iBAEJ,IAAM+D,EAAWvF,IAAE,wBAAwB3C,KAAK,2BAA2BmI,MAAMC,cAC3EC,EAAa1F,IAAE,wBAAwB3C,KAAK,6BAA6BmI,MAAMC,cAC/EE,EAAY3F,IAAE,wBAAwB3C,KAAK,4BAA4BmI,MAAMC,cAC7E+C,EAAaxI,IAAE,wBAAwB3C,KAAK,6BAA6BmI,MAAMC,cAE/EG,EAAc5F,IAAE,sBAAsB3C,KAAK,SAEjDuI,EAAYvI,KAAK,MAAMwI,OAGnBN,GACAK,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,kBAAkB4I,OAAOR,cAAcS,SAASX,GAC3DvF,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMdyF,GACAE,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,oBAAoB4I,OAAOR,cAAcS,SAASR,GAC7D1F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMd0F,GACAC,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,mBAAmB4I,OAAOR,cAAcS,SAASP,GAC5D3F,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,SAMduI,GACA5C,EAAYvI,KAAK,cAAcyI,KAAK,SAACC,EAAGC,GAChChG,IAAEgG,GAAI3I,KAAK,oBAAoB4I,OAAOR,cAAcS,SAASsC,GAC7DxI,IAAEgG,GAAIH,OAGN7F,IAAEgG,GAAI/F,sDAMDvC,EAAWN,GAC5B,IAAMS,EAAW6B,KAAKJ,MAAMzB,SAE5B6B,KAAKwB,SAAS,CACViG,eAAgBpG,EAA2BlD,EAAUT,EAAUM,GAC/D0J,cAAe,WAGnBpH,IAAE,sBAAsB6F,KAAK,mDAGXnI,GAElB,IAAMG,EAAW6B,KAAKJ,MAAMzB,SAE5B6B,KAAKwB,SAAS,CACViG,eAAgBpG,EAA4BlD,EAAUH,GACtD0J,cAAe,oBAGnBpH,IAAE,sBAAsB6F,KAAK,+CAI7B7F,IAAE,oBAAoB6F,KAAK,sCAGtB,IAAAjE,EAAAlC,KACCoI,EAAWpI,KAAKJ,MAAMwI,SACtB5H,EAAYR,KAAKJ,MAAMY,UACvBzC,EAAUiC,KAAKJ,MAAM7B,QACrBN,EAAUuC,KAAKJ,MAAMnC,QAE3B,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkB4J,SAAU,SAACrF,GAAUY,EAAK0E,YAAYtF,KACpE1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,oBAAoBhJ,GAAG,oBAAoBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MAC9G1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,qBAAkBhJ,GAAG,sBAAsBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MAC9G1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,+BAAyBhJ,GAAG,sBAAsBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,MACrH1E,EAAAC,EAAAC,cAAA,SAAOkF,KAAK,OAAO6E,YAAY,sBAAsBhJ,GAAG,qBAAqBwE,SAAU,SAACf,GAAD,OAASY,EAAK0E,YAAYtF,OAGrH1E,EAAAC,EAAAC,cAAA,OAAKgK,MAAO,CAACC,OAAQ,UAAWhK,UAAU,iBACtCH,EAAAC,EAAAC,cAACyF,EAAA,OAAD,CAAQH,QAAS,kBAAMF,EAAKuG,oBAA5B,0BAGJ7L,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYc,GAAG,gBAC5BjB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBAIRF,EAAAC,EAAAC,cAAA,aACKsL,EAASzH,IAAI,SAAAoI,GAAO,OTzD1C,SAA8BvI,EAAWzC,EAASiL,GAGrD,IAAMC,EAAgB,GAH2CC,GAAA,EAAAC,GAAA,EAAAC,OAAArK,EAAA,IAKjE,QAAAsK,EAAAC,EAAuB9I,EAAvBtB,OAAAC,cAAA+J,GAAAG,EAAAC,EAAAlK,QAAAC,MAAA6J,GAAA,EAAkC,KAAvBK,EAAuBF,EAAA/J,MAC9B,GAAIiK,EAASpB,YAAca,EAAY,KAAAQ,GAAA,EAAAC,GAAA,EAAAC,OAAA3K,EAAA,IAInC,QAAA4K,EAAAC,EAA8BL,EAASxL,QAAvCmB,OAAAC,cAAAqK,GAAAG,EAAAC,EAAAxK,QAAAC,MAAAmK,GAAA,EAAgD,KACtCK,EAAkB/L,EAAcC,EADM4L,EAAArK,MACmBb,UAC3DoL,GACAZ,EAAc1J,KAAKsK,IAPQ,MAAArK,GAAAiK,GAAA,EAAAC,EAAAlK,EAAA,YAAAgK,GAAA,MAAAI,EAAAnK,QAAAmK,EAAAnK,SAAA,WAAAgK,EAAA,MAAAC,MANsB,MAAAlK,GAAA2J,GAAA,EAAAC,EAAA5J,EAAA,YAAA0J,GAAA,MAAAI,EAAA7J,QAAA6J,EAAA7J,SAAA,WAAA0J,EAAA,MAAAC,GAmBjE,OAAOH,ESuCqB5H,CAA4Bb,EAAWzC,EAASgL,EAAQlL,IAAI8C,IAAI,SAAA1C,GAC5D,OT1F7B,SAA8BR,EAAS+C,EAAW/B,EAAUuK,GAE/D,IAAIc,EAAgB,GAChBC,EAAmB,GAHoD1G,GAAA,EAAAC,GAAA,EAAAC,OAAAxE,EAAA,IAK3E,QAAAyE,EAAAC,EAAuBjD,EAAvBtB,OAAAC,cAAAkE,GAAAG,EAAAC,EAAArE,QAAAC,MAAAgE,GAAA,EAAkC,KAAvBkG,EAAuB/F,EAAAlE,MAC9B,GAAIiK,EAASpB,YAAca,EAAY,CAEnCe,EAAmBA,EAAiBjJ,OAAOyI,EAASxL,SAFjB,IAAA4F,GAAA,EAAAC,GAAA,EAAAC,OAAA9E,EAAA,IAInC,QAAA+E,EAAAC,EAA8BwF,EAASxL,QAAvCmB,OAAAC,cAAAwE,GAAAG,EAAAC,EAAA3E,QAAAC,MAAAsE,GAAA,EAAgD,KAArCqG,EAAqClG,EAAAxE,MAC5C,GAAI0K,EAAgBvL,WAAaA,EAAU,KAAAwL,GAAA,EAAAC,GAAA,EAAAC,OAAApL,EAAA,IACvC,QAAAqL,EAAAC,EAAqBL,EAAgBvM,QAArCyB,OAAAC,cAAA8K,GAAAG,EAAAC,EAAAjL,QAAAC,MAAA4K,GAAA,EAA8C,KAAnCrH,EAAmCwH,EAAA9K,MAGtCsD,EAAOzB,eAAe,iBACtByB,EAAO/E,GAAK+E,EAAOxB,cAEnBwB,EAAO/E,GAAK+E,EAAOlE,QAGvBoL,EAAcvK,KAAK/B,EAAaC,EAASmF,EAAO/E,MAVb,MAAA2B,GAAA0K,GAAA,EAAAC,EAAA3K,EAAA,YAAAyK,GAAA,MAAAI,EAAA5K,QAAA4K,EAAA5K,SAAA,WAAAyK,EAAA,MAAAC,MALZ,MAAA3K,GAAAoE,GAAA,EAAAC,EAAArE,EAAA,YAAAmE,GAAA,MAAAI,EAAAtE,QAAAsE,EAAAtE,SAAA,WAAAmE,EAAA,MAAAC,MANgC,MAAArE,GAAA8D,GAAA,EAAAC,EAAA/D,EAAA,YAAA6D,GAAA,MAAAI,EAAAhE,QAAAgE,EAAAhE,SAAA,WAAA6D,EAAA,MAAAC,GA4B3E,OAAOuG,ES8DgCzI,CAA4B5D,EAAS+C,EAAWvC,EAAOJ,GAAIkL,EAAQlL,IAAI8C,IAAI,SAAAiC,GAAM,OACpFhG,EAAAC,EAAAC,cAAA,MAAI4F,IAAKqG,EAAQlL,GAAK,IAAMI,EAAOJ,GAAK,IAAM+E,EAAO/E,IACjDjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAegM,EAAQrH,MACrC9E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBsE,EAAoB5D,EAASmF,EAAO/E,IAAI6D,MACvE9E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBqF,QAAS,kBAAMF,EAAKoI,sBAAsBrM,EAAOJ,MAAMI,EAAOyD,MACnG9E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBqF,QAAS,kBAAMF,EAAKqI,qBAAqBtM,EAAOJ,GAAI+E,EAAO/E,MAAM+E,EAAOlB,gBAWxI9E,EAAAC,EAAAC,cAAC0N,EAAD,CAAqB/C,eAAgBzH,KAAKI,MAAMqH,eAAgBC,cAAe1H,KAAKI,MAAMsH,gBAC1F9K,EAAAC,EAAAC,cAAC2N,EAAD,cAxJOpN,aAyKRyF,kBAVf,SAAyB1C,GACrB,MAAO,CACHjC,SAAUiC,EAAMsF,eAAevH,SAC/BV,QAAS2C,EAAM2C,eAAetF,QAAQA,QACtCM,QAASqC,EAAM4C,eAAejF,QAC9ByC,UAAWJ,EAAM6C,iBAAiBC,cAClCkF,SAAUhI,EAAMwI,eAAeR,WAIxBtF,CAAyB+F,WChLlC6B,EAAgB,CAClBvM,gBAgHWwM,MAxGf,WAAuD,IAA/BvK,EAA+BwK,UAAA/F,OAAA,QAAA9F,IAAA6L,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAA/F,OAAA,EAAA+F,UAAA,QAAA7L,EAEnD,IAAK8L,EAGD,OAFAlD,QAAQC,IAAI,aAELxH,EAGX,GAAoB,yBAAhByK,EAAO7I,KAAiC,CACxC2F,QAAQC,IAAI,wBAWZ,IATA,IAAMnB,EAAaoE,EAAOpE,WACpB7F,EAAeiK,EAAOjK,aACtBH,EAAaoK,EAAOpK,WAGpBqK,EAAWC,KAAKC,MAAMD,KAAKE,UAAU7K,IAGrC8K,EAAU7G,KAAK8G,IAAIpK,MAAMsD,KAAMjE,EAAMjC,SAASwC,IAAI,SAAStC,GAAW,OAAOA,EAAQR,MAClFsG,EAAQ+G,EAAU,EAAG/G,EAAQ+G,EAAU,IAAK/G,IACjD,KAAI,WAGA,IAAMiH,EAAe3E,EAAWpC,KAAKC,MAAMD,KAAKE,SAAWkC,EAAW5B,SAGlEnE,EAAsBE,EAAaD,IAAI,SAAAC,GAAY,OAAIA,EAAa7C,UAGlEsN,GAFN3K,EAAsB,GAAGI,OAAOC,MAAM,GAAIL,IAEGlC,OAAO,SAAAwC,GAAE,OAAIA,EAAGvC,WAAa2M,EAAavN,KAEjFyN,EAAqBD,EAAiBhH,KAAKC,MAAMD,KAAKE,SAAW8G,EAAiBxG,SAElF0G,EAAsBD,EAAmB7N,QAAQ4G,KAAKC,MAAMD,KAAKE,SAAW+G,EAAmB7N,QAAQoH,SAEvG2G,EAAY/K,EAAW9C,KAAK,SAAAsD,GAE9B,OAAIsK,EAAoBpK,eAAe,iBAC5BF,EAAQpD,KAAO0N,EAAoBnK,cAEnCH,EAAQpD,KAAO0N,EAAoB7M,UAIlDoM,EAAS3M,SAASoB,KAAK,CACnB1B,GAAMsG,EACNsH,GAAMtH,EACNzC,KAAQ,iBAAmByC,EAC3B1F,SAAY2M,EAAavN,GACzBa,QAAW8M,EAAU3N,KA7BzB,GAiCF,MAAO6N,GACL/D,QAAQgE,KAAK,0DAA4Db,EAAS3M,SAAS0G,QAC3FV,GAAS,EAKjB,OAAO2G,EAGX,GAAoB,qBAAhBD,EAAO7I,KAA6B,CACpC2F,QAAQC,IAAI,oBAGZ,IAOIgE,EAPEd,EAAWC,KAAKC,MAAMD,KAAKE,UAAU7K,IAErCyL,EAAchB,EAAOhJ,UACrBiK,EAAWjB,EAAOnJ,KAClBqK,EAAclB,EAAOnM,QACrBsN,EAAenB,EAAOpM,SAGxBwN,EAAkBnB,EAAS3M,SAASR,KAAK,SAACU,EAAS8F,GACnD,OAAI9F,EAAQR,KAAOgO,IACfD,EAAgBzH,GACT,KAkBf,OAVA8H,EAAenM,OAAA2B,EAAA,EAAA3B,CAAA,GACRmM,EADQ,CAEXvK,KAAMoK,EACNpN,QAASqN,EACTtN,SAAUuN,IAIdlB,EAAS3M,SAASyN,GAAiBK,EAE5BnB,EAGX,OAAO1K,GC7GLsK,EAAgB,CAClBxH,qBA8CWD,MAtCf,WAAyD,IAA/B7C,EAA+BwK,UAAA/F,OAAA,QAAA9F,IAAA6L,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAA/F,OAAA,EAAA+F,UAAA,QAAA7L,EAErD,IAAK8L,EAGD,OAFAlD,QAAQC,IAAI,aAELxH,EAGX,GAAmB,wBAAhByK,EAAO7I,KAA+B,CAErC,IAAM8I,EAAWC,KAAKC,MAAMD,KAAKE,UAAU7K,IAEpC+H,EAAgD0C,EAAhD1C,UAAWG,EAAqCuC,EAArCvC,SAAU7J,EAA2BoM,EAA3BpM,SAAU2C,EAAiByJ,EAAjBzJ,cAEhC8K,EAAc,CAChBrO,GAAMuC,EAAM8C,cAAc2B,OAAO,EACjCsD,UAAaA,EACbG,SAAYA,EACZvK,QAAW,CACP,CACIU,SAAYA,EACZhB,QAAW,CACP,CACI2D,cAAiBA,OAQrC,OADA0J,EAAS5H,cAAc3D,KAAK2M,GACrBpB,EAIX,OAAO1K,GC5CLsK,EAAgB,CAClBjN,eAwBWsF,MAhBf,WAAuD,IAA/B3C,EAA+BwK,UAAA/F,OAAA,QAAA9F,IAAA6L,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAA/F,OAAA,EAAA+F,UAAA,QAAA7L,EAEnD,OAAK8L,GAMDA,EAAO7I,KAIJ5B,IATHuH,QAAQC,IAAI,aAELxH,ICdTsK,EAAgB,CAClB3M,eAuBWiF,MAff,WAAuD,IAA/B5C,EAA+BwK,UAAA/F,OAAA,QAAA9F,IAAA6L,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAA/F,OAAA,EAAA+F,UAAA,QAAA7L,EAEnD,OAAK8L,GAMDA,EAAO7I,KACA5B,IANPuH,QAAQC,IAAI,aAELxH,ICdTsK,EAAgB,CAClBtC,gBAqCWuC,MA7Bf,WAAuD,IAA/BvK,EAA+BwK,UAAA/F,OAAA,QAAA9F,IAAA6L,UAAA,GAAAA,UAAA,GAAvBF,EAAeG,EAAQD,UAAA/F,OAAA,EAAA+F,UAAA,QAAA7L,EAEnD,IAAK8L,EAGD,OAFAlD,QAAQC,IAAI,aAELxH,EAGX,GAAmB,uBAAhByK,EAAO7I,KAA8B,CAEpC,IAAM8I,EAAWC,KAAKC,MAAMD,KAAKE,UAAU7K,IAEpC2H,EAA0B8C,EAA1B9C,YACDoE,EAAa,CACftO,GAF6BgN,EAAb1C,UAGhBzG,KAAMqG,GAKV,OAFA+C,EAAS1C,SAAS7I,KAAK4M,GAEhBrB,EAKX,OAAO1K,GClCLsK,EAAgB,CAClBpD,eAkBW8E,MAVf,WAAsD,IAA/BhM,EAA+BwK,UAAA/F,OAAA,QAAA9F,IAAA6L,UAAA,GAAAA,UAAA,GAAvBF,EAC3B,OADkDE,UAAA/F,OAAA,EAAA+F,UAAA,QAAA7L,GAO3CqB,GALHuH,QAAQC,IAAI,aAELxH,ICKAiM,GAXKC,YAAgB,CAChC5G,iBACAzC,mBACAF,iBACAC,iBACA4F,iBACArB,kBCVWgF,GAFDC,YAAYH,IC+BXI,OAvBf,WAGE,OAFA9G,OAAO+G,UAAYA,GACnB/G,OAAOgH,KAAOC,0BAEZhQ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAe6P,SAAUD,2BACvBhQ,EAAAC,EAAAC,cAACgQ,EAAA,EAAD,CAAUP,MAAOG,IACf9P,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAOC,KAAK,KAEVpQ,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,KAEEnQ,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,OAAQ,kBAAOtQ,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAU9P,GAAI,iBAC1DL,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAO,EAAME,UAAWvH,IAChDhJ,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAO,EAAME,UAAWtE,IAEhDjM,EAAAC,EAAAC,cAACiQ,EAAA,EAAD,CAAOI,UAAW7P,SCbV8P,QACW,cAA7BzH,OAAO0H,SAASC,UAEe,UAA7B3H,OAAO0H,SAASC,UAEhB3H,OAAO0H,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAOtQ,EAAAC,EAAAC,cAAC2Q,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5102286.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nexport default class Header extends Component {\n\n    render() {\n        return (\n            <div className=\"bg-header\">\n                <header className=\"header-main container\">\n\n                    <Link to=\"/\" className=\"logo\" title=\"Evolucional\"><img alt=\"Evolucional\" src=\"http://www.evolucional.com.br/Public/images/logo-evolucional.png\" /></Link>\n\n                    <span className=\"btn-menu\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </span>\n\n                    <nav className=\"menu\">\n                        <ul>\n                            <li><Link to=\"/\" title=\"Home\">HOME</Link></li>\n                            \n                            <li><Link to=\"/students\" title=\"\">Estudantes</Link></li>\n                            <li><Link to=\"/teachers\" title=\"\">Professores</Link></li>\n                            \n                            {/* <li><Link href=\"/experimente\" className=\"hide\" title=\"Promoçãp\">EXPERIMENTE </Link></li> */}\n                        </ul>\n                    </nav>\n                </header>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Header from './Header';\nexport default class NotFound extends Component {\n\n    render() {\n        return (\n            <div className=\"\">\n                <Header/>\n                <div className=\"body\">\n                    <h1>Página não encontrada</h1>\n                </div>\n            </div>\n        );\n    }\n}   ","export function getClassById(classes, class_id) {\n    return classes.find(_class => _class.id === class_id);\n}\n\nexport function getDegreeById(degrees, degree_id) {\n    return degrees.find(degree => degree.id === degree_id);\n}\n\nexport function getMatterById(matters, matter_id) {\n    return matters.find(matter => matter.id === matter_id);\n}\n\nexport function getStudentById(students, student_id) {\n    return students.find(student => student.id === student_id);\n}\n\nexport function getClassesOfADegree(classes, relations, degreeId) {\n\n    const allClasses = classes;\n    const allRelations = relations;\n\n    let allRelationsDegrees = allRelations.map(allRelations => allRelations.degrees); // get only degrees relationship\n    allRelationsDegrees = [].concat.apply([], allRelationsDegrees); // merge in a single list\n\n    const allDegreesWithId = allRelationsDegrees.filter(el => el.degreeId === degreeId);\n\n    let classesForThisDegree = allDegreesWithId.map(el => el.classes);\n    classesForThisDegree = [].concat.apply([], classesForThisDegree);\n\n    const listOfClasses = allClasses.filter(a_class => {\n        return (classesForThisDegree.find(b_class => {\n            // the data are inconsistent: some relatioships have key \"classPosition\" others \"classId\" \n            if (b_class.hasOwnProperty(\"classPosition\")) {\n                b_class.id = b_class.classPosition\n            } else {\n                b_class.id = b_class.classId;\n            }\n\n            return b_class.id === a_class.id\n        }))\n    });\n\n\n\n    return listOfClasses;\n}\n\n/**\n * Filter also by teacher_id\n * @param {*} classes \n * @param {*} relations \n * @param {*} degreeId \n * @param {*} teacher_id \n */\nexport function getClassesOfADegree2(classes, relations, degreeId, teacher_id) {\n\n    let listOfClasses = []\n    let degrees_relation = [];\n\n    for (const relation of relations) {\n        if (relation.teacherId === teacher_id) {\n\n            degrees_relation = degrees_relation.concat(relation.degrees);\n\n            for (const degree_relation of relation.degrees) {\n                if (degree_relation.degreeId === degreeId) {\n                    for (const class_ of degree_relation.classes) {\n\n                        // the data are inconsistent: some relatioships have key \"classPosition\" others \"classId\" \n                        if (class_.hasOwnProperty(\"classPosition\")) {\n                            class_.id = class_.classPosition\n                        } else {\n                            class_.id = class_.classId;\n                        }\n\n                        listOfClasses.push(getClassById(classes, class_.id));\n                    }\n                }\n            }\n        }\n    }\n\n    return listOfClasses;\n}\n\nexport function getDegreesOfATeacher(relations, degrees, teacher_id) {\n\n    // let degrees_relation = [];\n    const degrees_found = [];\n\n    for (const relation of relations) {\n        if (relation.teacherId === teacher_id) {\n\n            // degrees_relation = degrees_relation.concat(relation.degrees);\n\n            for (const degree_relation of relation.degrees) {\n                const getDegreeResult = getDegreeById(degrees, degree_relation.degreeId);\n                if (getDegreeResult) {\n                    degrees_found.push(getDegreeResult);\n                }\n            }\n        }\n    }\n\n    return degrees_found;\n}\n\nexport function getStudentsOfAClass(students, class_id, degree_id) {\n\n    const studentsOfTheSameClass = students.filter(student => (student.degreeId === degree_id && student.classId === class_id));\n    const students_result = [];\n    for (const student of studentsOfTheSameClass) {\n        students_result.push(getStudentById(students, student.id));\n    }\n\n    return students_result;\n}\n\nexport function getStudentsOfADegree(students, degree_id) {\n\n    const students_result = students.filter(student => student.degreeId === degree_id);\n\n    return students_result;\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport { Select, Button } from \"react-materialize\";\nimport * as studentActions from \"../actions/studentActions\";\nimport * as common from \"../utils/common\";\n\n\nclass EditStudentPopUp extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            studentToEdit: this.props.studentToEdit\n        }\n\n    }\n\n    closePopUp() {\n        $(\"#editStudent\").hide(500);\n    }\n\n    getClassesOfADegree(degreeId) {\n\n        const allClasses = this.props.classes;\n        const allRelations = this.props.relations;\n\n        return common.getClassesOfADegree(allClasses, allRelations, degreeId);\n    }\n\n    updateForm(evt, what) {\n\n        if (what === \"name\") {\n            this.setState({\n                ...this.state,\n                studentToEdit: { ...this.state.studentToEdit, name: evt.target.value }\n            });\n        }\n\n        else if (what === \"degree\") {\n            this.setState({\n                ...this.state,\n                studentToEdit: { ...this.state.studentToEdit, degreeId: parseInt(evt.target.value, 0) }\n            });\n        }\n\n        else if (what === \"class\") {\n            this.setState({\n                ...this.state,\n                studentToEdit: { ...this.state.studentToEdit, classId: parseInt(evt.target.value, 0) }\n            });\n\n        }\n\n    }\n\n    updateStateFromProps() {\n        // We are reusing this popup, so we might want to change the state in two cases:\n        // - initial state: state is null\n        // - using for multiples users\n        if (!this.state.studentToEdit ||\n            (this.state.studentToEdit && this.state.studentToEdit.id !== this.props.studentToEdit.id)) {\n                // eslint-disable-next-line\n                this.state = ({\n                    ...this.state,\n                    studentToEdit: this.props.studentToEdit\n                })\n            }\n    }\n\n    applyChange(evt) {\n        evt.preventDefault();\n\n        this.props.dispatch(studentActions.editOneStudent(\n            this.state.studentToEdit.id,\n            this.state.studentToEdit.name,\n            this.state.studentToEdit.classId,\n            this.state.studentToEdit.degreeId\n        ));\n\n        this.closePopUp();\n    }\n\n\n\n    render() {\n        if (this.props.studentToEdit) {\n            this.updateStateFromProps();\n            return (\n                <div className=\"\">\n                    <div className=\"hover_bkgr_fricc\" id=\"editStudent\" >\n                        <span className=\"helper\"></span>\n                        <div>\n                            <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n                            <form>\n                                <input type=\"text\" value={this.state.studentToEdit.name} onChange={(evt) => this.updateForm(evt, \"name\")} />\n\n                                <Select value={this.state.studentToEdit.degreeId.toString()} onChange={(evt) => this.updateForm(evt, \"degree\")}>\n                                    <option value=\"\" disabled> Escolha um Grau </option>\n                                    {this.props.degrees.map(degree => {\n                                        return (\n                                            <option value={degree.id} key={degree.id} > {degree.name} </option>\n                                        )\n\n                                    })}\n                                </Select>\n\n                                <Select value={this.state.studentToEdit.classId.toString()} onChange={(evt) => this.updateForm(evt, \"class\")}>\n                                    <option value=\"\" disabled> Escolha uma classe </option>\n                                    {this.getClassesOfADegree(this.state.studentToEdit.degreeId).map(class_ => {\n                                        return (\n                                            <option value={class_.id} key={class_.id} > {class_.name} </option>\n                                        )\n                                    })}\n                                </Select>\n\n                                <Button onClick={(evt) => this.applyChange(evt)}>Aplicar</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return <div></div>\n        }\n    }\n}\n\n\n\nfunction mapStateToProps(state) {\n    return {\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n    }\n}\n\nexport default connect(mapStateToProps)(EditStudentPopUp);","export function createMoreStudents(allDegrees, allRelations, allClasses) {\n\n    return {\n        type: \"CREATE_MORE_STUDENTS\",\n        allDegrees,\n        allRelations,\n        allClasses\n    }\n}\n\n\nexport function editOneStudent(studentId, name, classId,  degreeId) {\n\n    return {\n        type: \"EDIT_ONE_STUDENT\",\n        studentId, \n        name, \n        classId, \n        degreeId\n    }\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport { Bar } from \"react-chartjs-2\";\n\n\nclass StudentChart extends Component {\n\n    // constructor(props){\n    //     super(props);\n\n    //     window.studentChart = this; // while developing\n    // }\n\n    closePopUp() {\n        $(\"#studentChart\").hide(500);\n    }\n\n    countStudentsInDegree(students) {\n\n \n        // compressed is a object key:value, where key is degreeId and value is the count_of_student\n        var compressed = {};\n\n        for (const student of students) {\n            if (compressed.hasOwnProperty(student.degreeId )){\n                compressed[student.degreeId] = compressed[student.degreeId]+1;\n            }\n            else{\n                compressed[student.degreeId] = 1;\n            }\n        }\n        \n\n        var ret = [];\n        // get cont in exact order of degree store\n        for (const degreeId of this.props.degrees.map(el => el.id)) {\n            ret.push(isNaN(compressed[degreeId]) ? 0 : compressed[degreeId]);\n        }\n\n        return ret;\n    };\n\n    \n    //Function to generate new colors\n    getRandomColors(numberOfColors) {\n        const colors = [];\n        for (let index = 0; index < numberOfColors; index++) {\n            // range between 0 e 255\n            var r = Math.floor(Math.random() * 255).toString();\n            var g = Math.floor(Math.random() * 255).toString();\n            var b = Math.floor(Math.random() * 255).toString();\n            \n            // push in colors array\n            colors.push({\"background\" : 'rgba('+r+', '+g+', '+b+', 0.5)', \"border\": 'rgba('+r+', '+g+', '+b+', 1)'});\n        }\n\n        return colors;\n      \n    }\n    \n\n    buildDataInFormatOfChartJS() {\n        const colors = this.getRandomColors(this.props.degrees.length);\n        return {\n            labels: this.props.degrees.map(el => el.name),\n            datasets: [{\n                label: 'Estudantes por Classe',\n                data: this.countStudentsInDegree(this.props.students),\n                backgroundColor: colors.map(el=>el.background),\n                borderColor: colors.map(el=>el.border),\n                borderWidth: 1\n            }]\n        };\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"\">\n                <div className=\"hover_bkgr_fricc\" id=\"studentChart\" /* style={{ display: this.props.visible ? 'block' : 'none' }} */ >\n                    <span className=\"helper\"></span>\n                    <div>\n                        <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n\n                        {/* <img src={in_development_image} alt=\"in development\" style={{ width: \"186px\" }} /> */}\n                        <Bar\n                            data={this.buildDataInFormatOfChartJS()}\n                            // width={100}\n                            // height={50}\n                            options={{ maintainAspectRatio: true }}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        students: state.studentReducer.students,\n        degrees: state.degreesReducer.degrees,\n    }\n}\n\nexport default connect(mapStateToProps)(StudentChart);","import React, { Component } from 'react';\nimport Header from './Header';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport * as studentActions from \"../actions/studentActions\";\nimport EditStudentPopup from './EditStudentPopup';\nimport { Button } from 'react-materialize';\nimport StudentChart from \"./StudentChart\";\nimport * as common from \"../utils/common\"\n\nwindow.$ = $; // to use in terminal while developing\n\n\nclass Students extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            studentToEdit : this.props.students[0]\n        }\n\n    }\n\n    getClassById(class_id) {\n        return common.getClassById(this.props.classes, class_id);\n    }\n\n    getDegreeById(degreeId) {\n        return common.getDegreeById(this.props.degrees, degreeId);\n    }\n\n    applyFilter(evt) {\n        evt.preventDefault();\n\n        const userName = $(\"form.filters-wrapper\").find(\"input#studentNameFilter\").val().toLowerCase();\n        const userDegree = $(\"form.filters-wrapper\").find(\"input#studentDegreeFilter\").val().toLowerCase();\n        const userClass = $(\"form.filters-wrapper\").find(\"input#studentClassFilter\").val().toLowerCase();\n\n        const table_tbody = $(\"table#studentTable\").find(\"tbody\");\n\n        table_tbody.find(\"tr\").show();\n\n        // filter by user name\n        if(userName){\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.studentName\").text().toLowerCase().includes(userName)){\n                    $(tr).show();\n                }\n                else{\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by degree\n        if(userDegree){\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.studentDegree\").text().toLowerCase().includes(userDegree)){\n                    $(tr).show();\n                }\n                else{\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by class\n        if(userClass){\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.studentClass\").text().toLowerCase().includes(userClass)){\n                    $(tr).show();\n                }\n                else{\n                    $(tr).hide();\n                }\n            });\n        }\n\n    }\n\n    createMoreStudents(){\n        this.props.dispatch((studentActions.createMoreStudents(this.props.degrees, this.props.relations, this.props.classes)));\n        alert(\"300 Estudantes criados\");\n    }\n\n    editOneStudent(studentToEdit){\n        \n        $(\"#editStudent\").show(500);\n\n        this.setState({\n            studentToEdit\n        });\n\n        \n    }\n\n    showChart(){\n        $(\"#studentChart\").show(500);\n    }\n\n    render() {\n        const students = this.props.students;\n        return (\n            <div className=\"\">\n                <Header />\n                <div className=\"body\">\n                    <h1>Estudantes</h1>\n\n                    <form className=\"filters-wrapper\" onSubmit={(evt) => { this.applyFilter(evt) }}>\n                        <input type=\"text\" placeholder=\"Nome do Aluno\" id=\"studentNameFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Graduação do Aluno\" id=\"studentDegreeFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Classe do Aluno\" id=\"studentClassFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                    </form>\n\n                    <div style={{margin: \"19px 0\"}} className=\"spaceElements\">\n                        \n                        <Button onClick={() => this.createMoreStudents()}> Gerar mais estudantes </Button>\n                        <Button onClick={() => this.showChart()}> Mostrar Gráfico </Button>\n                    </div>\n\n                    <table className=\"highlight\" id=\"studentTable\">\n                        <thead>\n                            <tr>\n                                <th>Nome</th>\n                                <th>Grau</th>\n                                <th>Classe</th>\n                                <th>Editar</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {students.map(student => (\n                                <tr key={student.id}>\n                                    <td className=\"studentName\">{student.name}</td>\n                                    <td className=\"studentDegree\">{this.getDegreeById(student.degreeId).name}</td>\n                                    <td className=\"studentClass\">{this.getClassById(student.classId).name}</td>\n                                    <td className=\"StudentEdit\" onClick={() => this.editOneStudent(student)}>\n                                        <i style={{fontSize:\"23px\"}} className=\"fa\">&#xf044;</i>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n\n                 \n\n                </div>\n            \n                <EditStudentPopup studentToEdit={this.state.studentToEdit}  />\n                \n                <StudentChart />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        students: state.studentReducer.students,\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n        matters: state.matterReducer.matters,\n\n    }\n}\n\nexport default connect(mapStateToProps)(Students);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\n\n\nclass StudentsOfClassPopUp extends Component {\n\n    // constructor(props) {\n        // super(props);\n\n        // while developing only\n        // window.studentsOfClassPopUp = this;\n    // }\n\n    closePopUp() {\n        $(\"#showStudentsPopup\").hide(500);\n    }\n\n    render() {\n        const students = this.props.studentsToShow;\n        const {degreeOrClass} = this.props;\n        console.log('students', students);\n        return (\n            <div className=\"\">\n                <div className=\"hover_bkgr_fricc\" id=\"showStudentsPopup\" >\n                    <span className=\"helper\"></span>\n                    <div>\n                        <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n\n                        {!(students.length>0) && (\n                            <div>\n                                <h2>Nenhum estudante para esta {degreeOrClass}</h2>\n\n                            </div>\n                        )}\n\n                        {(students.length>0) && (\n                            <div style={{overflowY: \"auto\",maxHeight: \"473px\"}}>\n                                <table className=\"highlight\">\n                                    <thead>\n                                        <tr>\n                                            <th>-</th>\n                                            <th>Nome</th>\n\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {students.map((student, index) => (\n                                            <tr key={student.id}>\n                                                <td>{index+1}</td>\n                                                <td>{student.name}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </table>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps)(StudentsOfClassPopUp);","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport $ from \"jquery\";\nimport { Select } from 'react-materialize';\nimport Button from 'react-materialize/lib/Button';\nimport { create_new_teacher } from \"../actions/TeacherActions\";\nimport { new_relation } from \"../actions/relationsActions\";\n\n\nclass StudentsOfClassPopUp extends Component {\n\n    // constructor(props) {\n    // super(props);\n\n    // while developing only\n    // window.studentsOfClassPopUp = this;\n    // }\n\n    closePopUp() {\n        $(\"#createProfessor\").hide(500);\n    }\n\n    createProfessor(evt) {\n        evt.preventDefault();\n\n        const teacherName   = $(\"#teacherName\").val();\n        const teacherDegree = parseInt($(\"#teacherDegree\").val());\n        const teacherClass  = parseInt($(\"#teacherClass\").val());\n        const teacherMatter  = parseInt($(\"#teacherMatter\").val());\n        const teacherId  = this.props.teachers.length+1\n\n        this.props.dispatch(create_new_teacher(teacherName, teacherId));\n        this.props.dispatch(new_relation(teacherId,teacherMatter,teacherDegree, teacherClass));\n\n        alert(\"Professor criado com sucesso =)\");\n        this.closePopUp();\n\n    }\n\n    render() {\n        const {classes, degrees, matters} = this.props;\n        return (\n            <div className=\"\">\n                <div className=\"hover_bkgr_fricc\" id=\"createProfessor\" >\n                    <span className=\"helper\"></span>\n                    <div>\n                        <div onClick={() => this.closePopUp()} className=\"popupCloseButton\">X</div>\n\n                        <form onSubmit={(evt) => this.createProfessor(evt)}>\n                            {/* Professor name */}\n                            <input type=\"text\" id=\"teacherName\" />\n\n                            {/* Professor degree */}\n                            <Select id=\"teacherDegree\">\n                                <option value=\"\" disabled> Escolha uma graduação </option>\n                                {degrees.map(class_ => {\n                                    return (\n                                        <option value={class_.id} key={class_.id} > {class_.name} </option>\n                                    )\n                                })}\n                            </Select>\n\n                            {/* professor class */}\n                            <Select id=\"teacherClass\">\n                                <option value=\"\" disabled> Escolha uma classe </option>\n                                {classes.map(class_ => {\n                                    return (\n                                        <option value={class_.id} key={class_.id} > {class_.name} </option>\n                                    )\n                                })}\n                            </Select>\n\n                            {/* professor Matter */}\n                            <Select id=\"teacherMatter\">\n                                <option value=\"\" disabled> Escolha uma matéria </option>\n                                {matters.map(matter => {\n                                    return (\n                                        <option value={matter.id} key={matter.id} > {matter.name} </option>\n                                    )\n                                })}\n                            </Select>\n\n                            <Button>Criar</Button>\n\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n        teachers: state.teacherReducer.teachers,\n        matters: state.matterReducer.matters\n    }\n}\n\nexport default connect(mapStateToProps)(StudentsOfClassPopUp);","export function create_new_teacher(teacherName, teacherId) {\n    return {\n        type: \"CREATE_NEW_TEACHER\",\n        teacherName,\n        teacherId\n    }\n}","export function new_relation(teacherId, matterId, degreeId, classPosition) {\n    return {\n        type:\"CREATE_NEW_RELATION\",\n        teacherId,\n        matterId,\n        degreeId,\n        classPosition\n    }\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Header from './Header';\nimport * as common from \"../utils/common\";\nimport $ from \"jquery\";\nimport StudentsToShowPopup from './StudentsToShowPopup';\nimport { Button } from 'react-materialize';\nimport CreateProfessorPopup from './CreateProfessorPopup';\n\nclass Teachers extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            studentsToShow: [],\n            degreeOrClass: \"\"\n        }\n\n    }\n\n    applyFilter(evt) {\n        evt.preventDefault();\n\n        const userName = $(\"form.filters-wrapper\").find(\"input#teacherNameFilter\").val().toLowerCase();\n        const userDegree = $(\"form.filters-wrapper\").find(\"input#teacherDegreeFilter\").val().toLowerCase();\n        const userClass = $(\"form.filters-wrapper\").find(\"input#teacherClassFilter\").val().toLowerCase();\n        const userMatter = $(\"form.filters-wrapper\").find(\"input#teacherMatterFilter\").val().toLowerCase();\n\n        const table_tbody = $(\"table#teacherTable\").find(\"tbody\");\n\n        table_tbody.find(\"tr\").show();\n\n        // filter by user name\n        if (userName) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherName\").text().toLowerCase().includes(userName)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by degree\n        if (userDegree) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherDegree\").text().toLowerCase().includes(userDegree)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by class\n        if (userClass) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherClass\").text().toLowerCase().includes(userClass)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n\n        // filter by matter\n        if (userMatter) {\n            table_tbody.find(\"tr:visible\").each((_, tr) => {\n                if ($(tr).find(\"td.teacherMatter\").text().toLowerCase().includes(userMatter)) {\n                    $(tr).show();\n                }\n                else {\n                    $(tr).hide();\n                }\n            });\n        }\n    }\n\n    showStudentsOfAClass(degree_id, class_id) {\n        const students = this.props.students;\n\n        this.setState({\n            studentsToShow: common.getStudentsOfAClass(students, class_id, degree_id),\n            degreeOrClass: \"Classe\"\n        });\n\n        $(\"#showStudentsPopup\").show(500);\n    }\n\n    showStudentsOfADegree(degree_id) {\n\n        const students = this.props.students;\n\n        this.setState({\n            studentsToShow: common.getStudentsOfADegree(students, degree_id),\n            degreeOrClass: \"Graduação\"\n        });\n\n        $(\"#showStudentsPopup\").show(500);\n    }\n\n    createProfessor(){\n        $(\"#createProfessor\").show(500);\n    }\n\n    render() {\n        const teachers = this.props.teachers;\n        const relations = this.props.relations;\n        const degrees = this.props.degrees;\n        const classes = this.props.classes;\n\n        return (\n            <div className=\"\">\n                <Header />\n                <div className=\"body\">\n                    <h1>Professores</h1>\n\n                    <form className=\"filters-wrapper\" onSubmit={(evt) => { this.applyFilter(evt) }}>\n                        <input type=\"text\" placeholder=\"Nome do Professor\" id=\"teacherNameFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Nome da Matéria\" id=\"teacherMatterFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Graduação do Professor\" id=\"teacherDegreeFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                        <input type=\"text\" placeholder=\"Classe do Professor\" id=\"teacherClassFilter\" onChange={(evt) => this.applyFilter(evt)} />\n                    </form>\n\n                    <div style={{margin: \"19px 0\"}} className=\"spaceElements\">\n                        <Button onClick={() => this.createProfessor()}> Cadastrar professor </Button>\n                    </div>\n\n                    <table className=\"highlight\" id=\"teacherTable\">\n                        <thead>\n                            <tr>\n                                <th>Nome</th>\n                                <th>Matéria</th>\n                                <th>Grau</th>\n                                <th>Classe</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {teachers.map(teacher => (\n                                common.getDegreesOfATeacher(relations, degrees, teacher.id).map(degree => {\n                                    return common.getClassesOfADegree2(classes, relations, degree.id, teacher.id).map(class_ => (\n                                        <tr key={teacher.id + \"-\" + degree.id + \"-\" + class_.id}>\n                                            <td className=\"teacherName\">{teacher.name}</td>\n                                            <td className=\"teacherMatter\">{common.getClassById(classes, class_.id).name}</td>\n                                            <td className=\"teacherDegree myLink\" onClick={() => this.showStudentsOfADegree(degree.id)}>{degree.name}</td>\n                                            <td className=\"teacherClass myLink\" onClick={() => this.showStudentsOfAClass(degree.id, class_.id)}>{class_.name}</td>\n                                        </tr>\n                                    ))\n                                }))\n                            )}\n                        </tbody>\n                    </table>\n\n\n                </div>\n\n                <StudentsToShowPopup studentsToShow={this.state.studentsToShow} degreeOrClass={this.state.degreeOrClass} />\n                <CreateProfessorPopup />\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        students: state.studentReducer.students,\n        classes: state.classesReducer.classes.classes,\n        degrees: state.degreesReducer.degrees,\n        relations: state.relationsReducer.relationships,\n        teachers: state.teacherReducer.teachers\n    }\n}\n\nexport default connect(mapStateToProps)(Teachers);","import students from \"../jsons/students.json\";\n\nconst INITIAL_STATE = {\n    students: students\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction StudentReducer(state = INITIAL_STATE, action) {\n\n    if (!action) {\n        console.log(\"No action\");\n\n        return state;\n    }\n\n    if (action.type === \"CREATE_MORE_STUDENTS\") {\n        console.log(\"CREATE_MORE_STUDENTS\");\n\n        const allDegrees = action.allDegrees;\n        const allRelations = action.allRelations;\n        const allClasses = action.allClasses;\n\n        // colone original state\n        const newState = JSON.parse(JSON.stringify(state));\n\n        // get last id of a student\n        const last_id = Math.max.apply(Math, state.students.map(function(student) { return student.id; }));\n        for (let index = last_id + 1; index < last_id + 300; index++) {\n            try {\n\n                // get random degreeID\n                const randomDegree = allDegrees[Math.floor(Math.random() * allDegrees.length)];\n\n                // get random classID of this degree (like a join in sql)\n                let allRelationsDegrees = allRelations.map(allRelations => allRelations.degrees); // get only degrees relationship\n                allRelationsDegrees = [].concat.apply([], allRelationsDegrees); // merge in a single list\n\n                const allDegreesWithId = allRelationsDegrees.filter(el => el.degreeId === randomDegree.id);\n\n                const randomDegreeWithId = allDegreesWithId[Math.floor(Math.random() * allDegreesWithId.length)];\n\n                const randomClassPosition = randomDegreeWithId.classes[Math.floor(Math.random() * randomDegreeWithId.classes.length)];\n\n                const the_class = allClasses.find(a_class => {\n                    // the data are inconsistent: some relatioships have key \"classPosition\" others \"classId\" \n                    if (randomClassPosition.hasOwnProperty(\"classPosition\")) {\n                        return a_class.id === randomClassPosition.classPosition;\n                    } else {\n                        return a_class.id === randomClassPosition.classId;\n                    }\n                });\n\n                newState.students.push({\n                    \"id\": index,\n                    \"ra\": index,\n                    \"name\": \"Nome do aluno \" + index,\n                    \"degreeId\": randomDegree.id,\n                    \"classId\": the_class.id\n                });\n\n\n            } catch (error) {\n                console.warn(\"Some error with the data. Total of students until now: \" + newState.students.length);\n                index -= 1; // step back until the x students are make\n            }\n\n        }\n\n        return newState;\n    }\n\n    if (action.type === \"EDIT_ONE_STUDENT\") {\n        console.log(\"EDIT_ONE_STUDENT\");\n\n        // colone original state\n        const newState = JSON.parse(JSON.stringify(state));\n\n        const _student_id = action.studentId;\n        const new_name = action.name;\n        const new_classId = action.classId;\n        const new_degreeId = action.degreeId;\n\n        let student_index;\n        let studentToChange = newState.students.find((student, index) => {\n            if (student.id === _student_id){\n                student_index = index;\n                return true;\n            }\n            else{\n                return false;\n            }\n            \n        });\n\n        studentToChange = {\n            ...studentToChange,\n            name: new_name,\n            classId: new_classId,\n            degreeId: new_degreeId\n\n        }\n\n        newState.students[student_index] = studentToChange;\n\n        return newState;\n    }\n\n    return state;\n\n}\n\nexport default StudentReducer;","import relationships from \"../jsons/relationships.json\";\n\nconst INITIAL_STATE = {\n    relationships\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction relationsReducer(state = INITIAL_STATE, action) {\n\n    if (!action){\n        console.log(\"No action\");\n        \n        return state;\n    }\n\n    if(action.type === \"CREATE_NEW_RELATION\"){\n        // copy original state\n        const newState = JSON.parse(JSON.stringify(state));\n\n        const {teacherId, matterId, degreeId, classPosition} = action;\n        \n        const newRelation = {\n            \"id\": state.relationships.length+1,\n            \"teacherId\": teacherId,\n            \"matterId\": matterId,\n            \"degrees\": [\n                {\n                    \"degreeId\": degreeId,\n                    \"classes\": [\n                        {\n                            \"classPosition\": classPosition\n                        }\n                    ]\n                }\n            ]\n        }\n\n        newState.relationships.push(newRelation)\n        return newState;\n\n    }\n\n    return state;\n}\n\nexport default relationsReducer;","import classes from \"../jsons/classes.json\";\n\nconst INITIAL_STATE = {\n    classes\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction classesReducer(state = INITIAL_STATE, action) {\n\n    if (!action){\n        console.log(\"No action\");\n        \n        return state;\n    }\n\n    if (action.type === \"\") {\n        \n    }\n\n    return state;\n\n}\n\nexport default classesReducer;","import degrees from \"../jsons/degrees.json\";\n\nconst INITIAL_STATE = {\n    degrees\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction degreesReducer(state = INITIAL_STATE, action) {\n\n    if (!action){\n        console.log(\"No action\");\n        \n        return state;\n    }\n\n    if (action.type === \"____\") {\n        return state;\n    }\n\n    return state;\n}\n\nexport default degreesReducer;","import teachers from \"../jsons/teachers.json\";\n\nconst INITIAL_STATE = {\n    teachers: teachers\n}\n\n/** \n * @param state\n * @param action\n * @returns state\n */\nfunction StudentReducer(state = INITIAL_STATE, action) {\n\n    if (!action) {\n        console.log(\"No action\");\n\n        return state;\n    }\n\n    if(action.type === \"CREATE_NEW_TEACHER\"){\n        // clone original state\n        const newState = JSON.parse(JSON.stringify(state));\n\n        const {teacherName, teacherId} = action;\n        const newTeacher = {\n            id: teacherId,\n            name: teacherName\n        }\n\n        newState.teachers.push(newTeacher);\n\n        return newState;\n    }\n\n\n\n    return state;\n\n}\n\nexport default StudentReducer;","import matters from \"../jsons/matters.json\";\n\nconst INITIAL_STATE = {\n    matters\n}\n\n/** \n* @param state\n* @param action\n* @returns state\n*/\nfunction MatterReducer(state = INITIAL_STATE, action) {\n    if (!action) {\n        console.log(\"No action\");\n\n        return state;\n    }\n\n    return state;\n\n}\nexport default MatterReducer;","import { combineReducers } from \"redux\";\nimport studentReducer from \"./StudentReducer\"\nimport relationsReducer from \"./RelationshipsReducer\"\nimport classesReducer from \"./ClassesReducer\"\nimport degreesReducer from \"./DegreesReducer\"\nimport teacherReducer from \"./TeacherReducer\"\nimport matterReducer from \"./MatterReducer\"\n\n\nconst rootReducer = combineReducers({\n    studentReducer,\n    relationsReducer,\n    classesReducer,\n    degreesReducer,\n    teacherReducer,\n    matterReducer\n\n    \n});\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport './css/App.css';\nimport './css/main.css';\nimport './css/materialize.css';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport NotFound from './components/NotFound';\nimport Students from \"./components/Students\";\nimport Teachers from \"./components/Teachers\";\nimport rootStore from \"./store\"\nimport { Provider } from \"react-redux\";\n\nfunction App() {\n  window.rootStore = rootStore;\n  window.test = process.env.PUBLIC_URL;\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={rootStore}>\n        <Route path=\"/\">\n\n          <Switch>\n\n            <Route path=\"/\" exact={true} render={() => (<Redirect to={\"/students\"} />)} />\n            <Route path=\"/students\" exact={true} component={Students} />\n            <Route path=\"/teachers\" exact={true} component={Teachers} />\n\n            <Route component={NotFound} />\n          </Switch>\n\n        </Route>\n      </Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}